import * as React from 'react';
import "@react-navigation/stack";
import "react-native-gesture-handler";
import { NavigationContainer } from "@react-navigation/native";
import { createBottomTabNavigator } from "@react-navigation/bottom-tabs";
import { createStackNavigator } from "@react-navigation/stack";
import { AppProvider, useAppContext } from "./AppContext"; 
import { ThemeProvider, useTheme } from './ThemeContext';
import { useFonts } from 'expo-font';
import MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons';
import SimpleLineIcons from 'react-native-vector-icons/SimpleLineIcons';
import FontAwesome6 from 'react-native-vector-icons/FontAwesome6';
import ChordChecker from './screens/ChordChecker';
import UserProfile from './screens/UserProfile';
import SettingsPage from './screens/SettingsPage';
import Login from './screens/Login';
import SignUp from './screens/SignUp';
import ManageUser from './screens/ManageUser';
import UserProgress from './screens/UserProgress';
import ThemePicker from './screens/ThemePicker';
import CreditsPage from './screens/CreditsPage';
import ClassPicker from './screens/ClassPicker';
import SplashScreen from './screens/SplashScreen';
import NotificationsSet from './screens/NotificationSet';

const Tab = createBottomTabNavigator();
const Stack = createStackNavigator();

function TabNavigator() {
  const { currentTheme } = useTheme();

  const [fontsLoaded] = useFonts({
    'Poppins-ExtraB': require('./assets/fonts/Poppins/Poppins-ExtraBold.ttf'),
    'Montserrat-ExtraB': require('./assets/fonts/Montserrat/static/Montserrat-ExtraBold.ttf'),
    'Montserrat-Bold': require('./assets/fonts/Montserrat/static/Montserrat-Bold.ttf'),
    'Montserrat-Med': require('./assets/fonts/Montserrat/static/Montserrat-Medium.ttf'),
    'Montserrat-Reg': require('./assets/fonts/Montserrat/static/Montserrat-Regular.ttf'),
    'RedHat-Bold': require('./assets/fonts/Red_Hat_Display/static/RedHatDisplay-Bold.ttf'),
});


  return (
    <Tab.Navigator
      screenOptions={({ route }) => ({
        tabBarIcon: ({ color, size }) => {
          let iconName;
          let IconComponent;

          if (route.name === 'Chords') {
            IconComponent = MaterialCommunityIcons;
            iconName = 'music-clef-treble'; 
          } else if (route.name === 'User') {
            IconComponent = FontAwesome6;
            iconName = 'user'; 
          } else if (route.name === 'Settings') {
            IconComponent = SimpleLineIcons;
            iconName = 'settings'; 
          }

          return <IconComponent name={iconName} size={size} color={color} />;
        },
        tabBarLabelStyle: {
          fontFamily: 'RedHat-Bold', // Use the loaded font
          fontSize: 11,
          textAlign: 'center',
        },
        tabBarStyle: {
          height: 70,
          backgroundColor: currentTheme.backgroundColor,
          display: 'flex',
          flexDirection: 'row',
          justifyContent: 'space-evenly',
          paddingBottom: 10,
          paddingTop: 5,
          borderTopColor: currentTheme.backgroundColor,
          borderTopWidth: 1,
        },
        tabBarActiveTintColor: currentTheme.buttonColor,
        tabBarInactiveTintColor: currentTheme.textColor,
      })}
    >
      <Tab.Screen name="Chords" component={ChordChecker} options={{ headerShown: false }} />
      <Tab.Screen name="User" component={UserProfile} options={{ headerShown: false }} />
      <Tab.Screen name="Settings" component={SettingsPage} options={{ headerShown: false }} />
    </Tab.Navigator>
  );
}

function UserAccountManager() {
  return (
    <Stack.Navigator
      initialRouteName={'Login'}
      screenOptions={({ route }) => ({
        headerShown: false,
        cardStyleInterpolator: ({ current, next, layouts }) => {
          const isSignUp = route.name === 'SignUp';

          return {
            cardStyle: {
              transform: [
                {
                  translateX: current.progress.interpolate({
                    inputRange: [0, 1],
                    outputRange: isSignUp ? [layouts.screen.width, 0] : [-layouts.screen.width, 0],
                  }),
                },
              ],
            },
          };
        },
      })}
    >
      <Stack.Screen name="Login" component={Login} options={{ headerShown: false }} />
      <Stack.Screen name="SignUp" component={SignUp} options={{ headerShown: false }} />
    </Stack.Navigator>
  );
}

function MainScreen() {
  const { userId, loading } = useAppContext();
  const { currentTheme } = useTheme();

  if (loading) {
    return <SplashScreen />;
  }

  return (
    <Stack.Navigator initialRouteName={'SplashScreen'}>
      <Stack.Screen name="SplashScreen" component={SplashScreen} options={{ headerShown: false }} />
      <Stack.Screen name="ClassPicker" component={ClassPicker} options={{ headerShown: false }} />
      <Stack.Screen name="userAccountScreen" component={UserAccountManager} options={{ headerShown: false }} />
      <Stack.Screen name="mainTabs" component={TabNavigator} options={{ headerShown: false }} />
      <Stack.Screen name="ManageUser" component={ManageUser} options={{ headerShown: false }} />
      <Stack.Screen name="UserProgress" component={UserProgress} options={{ headerShown: false }} />
      <Stack.Screen name="ThemePicker" component={ThemePicker} options={{ headerShown: false }} />
      <Stack.Screen name="NotificationsPanel" component={NotificationsSet} options={{ headerShown: false }} />
      <Stack.Screen name="CreditsPage" component={CreditsPage} options={{ headerShown: false }} />
    </Stack.Navigator>
  );
}

export default function App() {
  return (
    <ThemeProvider>
      <AppProvider>
        <NavigationContainer>
          <MainScreen />
        </NavigationContainer>
      </AppProvider>
    </ThemeProvider>
  );
}


import React, { useState, createContext, useContext, useEffect } from 'react';
import { supabase } from './supabase';

const AppContext = createContext();

export const AppProvider = ({ children }) => {
    const [userId, setUserId] = useState(null);
    const [role, setRole] = useState(null);
    const [updatedData, setUpdatedData] = useState(null);
    const [newPassword, setNewPassword] = useState(null);

    //region Initial User Management Stage (SignUp, SignIn, FetchUserData)
    const signUp = async (email, username, first_name, last_name, age, password, role) => {
        try {
            const { data: signupData, error: authError } = await supabase.auth.signUp({ email, password });
            console.log('SignUp Response ', signupData);
    
            if (authError) {
                console.error('Authentication Error:', authError.message);
                throw authError;
            }
    
            const user = signupData?.user;
            if (!user) {
                throw new Error('No user returned after sign-up.');
            }
    
            const formattedDate = new Intl.DateTimeFormat('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
            }).format(new Date());
    
            const { error: dbError } = await supabase
                .from('Users')
                .upsert({
                    id: user.id, 
                    email, 
                    username, 
                    age,
                    first_name, 
                    last_name,  
                    role,
                    created_at: formattedDate
                }, 
                {
                    onConflict: ['id']
                });
    
            if (dbError) {
                console.error('Database Error: ', dbError.message);
                throw dbError;
            }
    
            setUserId(user.id);
            setRole(role);
    
        } catch (error) {
            console.error('Error signing up:', error.message);
        }
    };
    

    const logIn = async (email, password) => {
        try {
            const { data: { user }, error } = await supabase.auth.signInWithPassword({
                email: email.toLowerCase(),
                password,
            });

            if (error) throw error;
            console.log('Login successful, User ID:', user.id);

            setUserId(user.id);
            return true;

        } catch (error) {
            console.error('Error during Login:', error.message);
            return false;
        }
    };

    const logOut = async () => {
        try {
          const { error } = await supabase.auth.signOut();
        
          if (error) throw error;
        
          setUserId(null);
        
        } catch (error) {
          console.error('Error logging out:', error);
        }
    };

    const fetchUserData = async (userId) => {
        if (!userId) {
            console.error('User ID is missing.');
            return null;
        }
    
        try {
            const { data, error } = await supabase
                .from('Users')
                .select('first_name, last_name, age, username, email, created_at, profile_picture')
                .eq('id', userId)
                .single()
    
            if (error) throw error;
    
            return {
                first_name: data.first_name, 
                last_name: data.last_name, 
                username: data.username,
                age: data.age, 
                email: data.email, 
                created_at: data.created_at,
                profile_picture: data.profile_picture
            }
        
        } catch (error) {
            console.error('Error fetching user data:', error.message);
            return null;
        }
    };

    //endregion Initial User Management Stage (SignUp, SignIn, FetchUserData)
    
    //region User Management Modification 
    const updateUserDetails = async (userId, updatedData) => {
        try {
            const { data, error } = await supabase
                .from('Users')
                .update(updatedData)
                .eq('id', userId);

            if (error) throw error;

            return data;
        } catch (error) {
            console.error('Error updating user details:', error.message);
        }
    }

    const updatePassword = async (newPassword) => {
        try {
            const { error } = await supabase.auth.updateUser({ password: newPassword });
            if (error) throw error;
            
        } catch (error) {
            console.error('Error updating user password:', error.message)
        }
    }
    //endregion User Management Modification 

    //region Profile Picture Upload
    const uploadProfilePicture = async (userId, imageUri) => {
        try {
            
            const fileExt = imageUri.split('.').pop();
            const fileName = `users/${userId}/${userId}-${Date.now()}.${fileExt}`; 
    
            
            const { data: storageData, error: storageError } = await supabase
                .storage
                .from('ProfilePictures')
                .upload(fileName, {
                    uri: imageUri,  
                    type: `image/${fileExt}`,
                    name: fileName,
                });
    
            if (storageError) {
                console.error('Storage Error: Failed to upload profile picture:', storageError.message);
                throw storageError;
            }
    
    
            const { data: publicUrlData, error: publicUrlError } = await supabase
                .storage
                .from('ProfilePictures')
                .getPublicUrl(fileName);
    
            if (publicUrlError || !publicUrlData?.publicUrl) {
                console.error('Error fetching public URL:', publicUrlError?.message);
                throw publicUrlError;
            }
    
            const publicUrl = publicUrlData.publicUrl;
    
            
            const { error: updateError } = await supabase
                .from('Users')
                .update({ profile_picture: publicUrl }) 
                .eq('id', userId);
    
            if (updateError) {
                console.error('Database Error: Failed to update user profile:', updateError.message);
                throw updateError;
            }
    
            console.log('Profile picture successfully uploaded and updated.');
            return publicUrl;
    
        } catch (error) {
            console.error('Error uploading profile picture:', error.message);
            throw error;
        }
    };
    
    //endregion Profile Picture Upload



    return (
        <AppContext.Provider 
            value={{userId, updatedData, role, signUp, logIn, logOut, fetchUserData,
                updateUserDetails, updatePassword, uploadProfilePicture, setRole
            }}
        >
            {children}
        </AppContext.Provider>
    )
}

export const useAppContext = () => useContext(AppContext);


import React, {useEffect, useState} from 'react';
import { View, TouchableOpacity, Text, Image, StyleSheet, ScrollView, ActivityIndicator } from 'react-native';
import { useTheme } from '../ThemeContext';
import { useFonts } from 'expo-font';
import { safeAreaView } from 'react-native-safe-area-context';
import Feather from 'react-native-vector-icons/Feather';
import FontAwesome5 from 'react-native-vector-icons/FontAwesome5';
import FontAwesome6 from 'react-native-vector-icons/FontAwesome6';
import Ionicons from 'react-native-vector-icons/Ionicons';
import IconDark from '../assets/icon4-1.png';
import IconLight from '../assets/icon4-2.png';



const ChordChecker = () => {
    const { isDarkMode, toggleTheme, currentTheme } = useTheme();
    const [selectedTheme, setSelectedTheme] = useState(isDarkMode ? 'dark' : 'light');

    useEffect(() => {
        setSelectedTheme(isDarkMode ? 'dark' : 'light');
    }, [isDarkMode]);

    const handleThemeChange = async (theme) => {
        setSelectedTheme(theme);

        await AsyncStorage.setItem('theme', theme);
        if ((theme === 'dark' && !isDarkMode) || (theme === 'light' && isDarkMode)) {
            toggleTheme();
        }
    };

    const [fontsLoaded] = useFonts({
        'Poppins-ExtraB': require('../assets/fonts/Poppins/Poppins-ExtraBold.ttf'),
        'Montserrat-ExtraB': require('../assets/fonts/Montserrat/static/Montserrat-ExtraBold.ttf'),
        'Montserrat-Bold': require('../assets/fonts/Montserrat/static/Montserrat-Bold.ttf'),
        'Montserrat-Med': require('../assets/fonts/Montserrat/static/Montserrat-Medium.ttf'),
        'Montserrat-Reg': require('../assets/fonts/Montserrat/static/Montserrat-Regular.ttf'),
        'RedHat-Bold': require('../assets/fonts/Red_Hat_Display/static/RedHatDisplay-Bold.ttf'),
    });

    if (!fontsLoaded) {
        return (
            <View style={styles.loadingContainer}>
                <ActivityIndicator size="large" color="#A8F94F" />
            </View>
        );
    }

    return (
        <ScrollView contentContainerStyle={[styles.mainCont, {backgroundColor: currentTheme.backgroundColor}]}>
            <View style={[styles.headerCont, {backgroundColor: currentTheme.backgroundColor}]}>
                <View style={[styles.logoContainer, {backgroundColor: currentTheme.backgroundColor}]}>
                    <Image source={isDarkMode ? IconDark : IconLight} style={styles.logoImg}/>
                    <Text style={[styles.logoTxt, {color: currentTheme.textColor}]}>G! Tara Na!</Text>
                </View>
                
                <TouchableOpacity style={styles.searchBtn}>
                    <Feather name='search' size={25} color={currentTheme.buttonColor}/>
                </TouchableOpacity>
            </View>

            <View style={styles.mainContent}>
                <View style={styles.quoteCont}>
                    <Text style={[styles.mainTxt, {color: currentTheme.textColor}]}>Harmony Unleashed</Text>
                    <Text style={[styles.subTxt, {color: currentTheme.textColor}]}>Your Ultimate Guide to Guitar Chords!</Text>
                </View>
                <Image source={require('../assets/homeImg.png')} style={styles.mainImg}/>
            </View>

            <View style={styles.charBoxes}>
                <TouchableOpacity style={[styles.charBox1, {backgroundColor: currentTheme.backgroundColor4}]}>
                    <FontAwesome5 name='hands-helping' color={currentTheme.textColor} size={25}/>
                    <Text style={[styles.charTxt1, {color: currentTheme.textColor}]}>Easy To Use</Text>    
                </TouchableOpacity>
                <TouchableOpacity style={[styles.charBox2, {backgroundColor: currentTheme.backgroundColor4}]}>                    
                    <FontAwesome6 name='ear-listen' color={currentTheme.textColor} size={25}/>
                    <Text style={[styles.charTxt2, {color: currentTheme.textColor}]}>Ear Trainer</Text>    
                </TouchableOpacity>
                <TouchableOpacity style={[styles.charBox3, {backgroundColor: currentTheme.backgroundColor4}]}>                    
                    <Ionicons name='musical-note' color={currentTheme.textColor} size={25}/>
                    <Text style={[styles.charTxt3, {color: currentTheme.textColor}]}>Harmonic Bliss</Text>    
                </TouchableOpacity>
            </View>
        </ScrollView>
    )
}


const styles = StyleSheet.create ({
    loadingContainer: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: '#0a0f1b',
    },

    mainCont: {
        flexGrow: 1,
        backgroundColor: '#0a0f1b',
        padding: 20,
        paddingTop: 45,
    },

    //#region Header
    headerCont: {
        display: 'flex',
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
    },
    logoContainer: {
        display: 'flex',
        flexDirection: 'row',
        justifyContent: 'space-around',
        alignItems: 'center',
        gap: 5,
    },
    logoImg: {
        width: 58,
        height: 58,
        margin: 0,
    },
    logoTxt: {
        color: '#FFF',
        fontSize: 21,
        fontFamily: 'Poppins-ExtraB',
    },
    searchBtn: {
        marginHorizontal: 15,
        marginBottom: 5,
    },
    //#endregion Header

    //#region Main
    mainContent: {
        display: 'flex',
        alignItems: 'center',
        gap: 50,
        marginVertical: 25,
    },
    quoteCont: {
        display: 'flex',
        alignItems: 'center',
    },
    mainTxt: {
        color: '#FFF',
        fontSize: 25,
        textAlign: 'center',
        fontFamily: 'Montserrat-Bold',
    },  
    subTxt: {
        color: '#FFF',
        fontSize: 18,
        textAlign: 'center',
        fontFamily: 'Montserrat-Med',
        opacity: 0.6,
        paddingHorizontal: 10,
    },  
    mainImg: {
        width: 300,
        height: 275,
    },
    //#endregion Main

    //#region charBoxes 
    charBoxes: {
        display: 'flex',
        flexDirection: 'row',
        justifyContent: 'space-around',
        marginVertical: 25,
    },
    charBox1: {
        backgroundColor: '#1A2433',
        width: 100,
        height: 130,
        borderRadius: 5,
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        gap: 15,
    }, charTxt1: {
        color: '#FFF',
        fontSize: 11,
        fontFamily: 'Montserrat-Bold',
    },
    charBox2: {
        backgroundColor: '#1A2433',
        width: 100,
        height: 130,
        borderRadius: 5,
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        gap: 15,
    }, charTxt2: {
        color: '#FFF',
        fontSize: 11,
        fontFamily: 'Montserrat-Bold',
    },
    charBox3: {
        backgroundColor: '#1A2433',
        width: 100,
        height: 130,
        borderRadius: 5,
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        gap: 15,
    }, charTxt3: {
        color: '#FFF',
        fontSize: 11,
        fontFamily: 'Montserrat-Bold',
    },
    //#endregion charBoxes 
})

export default ChordChecker;

import { View, TouchableOpacity, TextInput, Text, Image, ImageBackground, StyleSheet, ScrollView, Alert, ActivityIndicator } from 'react-native';
import React, {useState} from 'react';
import { useAppContext } from '../AppContext';
import { useNavigation } from '@react-navigation/native';
import { useFonts } from 'expo-font';
import { safeAreaView } from 'react-native-safe-area-context';
import FontAwesome6 from 'react-native-vector-icons/FontAwesome6';


const ClassPicker = () => {
    const navigation = useNavigation();
    const { setRole } = useAppContext();
    

    const handleRoleSelect = (selectedRole) => {
        setRole(selectedRole); 

        if (selectedRole === 'user' || selectedRole === 'coach') {
            navigation.navigate('userAccountScreen', { role: selectedRole }); 
        } else {
            Alert.alert('Admin access is required.');
        }
    };

    const [fontsLoaded] = useFonts({
        'Poppins-ExtraB': require('../assets/fonts/Poppins/Poppins-ExtraBold.ttf'),
        'Montserrat-ExtraB': require('../assets/fonts/Montserrat/static/Montserrat-ExtraBold.ttf'),
        'Montserrat-Bold': require('../assets/fonts/Montserrat/static/Montserrat-Bold.ttf'),
        'Montserrat-Med': require('../assets/fonts/Montserrat/static/Montserrat-Medium.ttf'),
        'Montserrat-Reg': require('../assets/fonts/Montserrat/static/Montserrat-Regular.ttf'),
        'Montserrat-Thin': require('../assets/fonts/Montserrat/static/Montserrat-Light.ttf'),
        'RedHat-Bold': require('../assets/fonts/Red_Hat_Display/static/RedHatDisplay-Bold.ttf'),
    });

    if (!fontsLoaded) {
        return (
            <View style={styles.loadingContainer}>
                <ActivityIndicator size="large" color="#A8F94F" />
            </View>
        );
    }

    return (
        <ScrollView contentContainerStyle={styles.mainCont}> 
            <View style={styles.logoCont}>
                <ImageBackground source={require('../assets/loginSignUpBG.png')} style={styles.mainLogoBG}>
                    <Image source={require('../assets/icon4-1.png')} style={styles.mainLogo} />
                    <Text style={styles.mainLogoTxt}>G! Tara Na!</Text>
                </ImageBackground>
            </View>

            <View style={styles.classPickCont}>
                <Text style={styles.classPickQuote}>WHAT'S YOUR ROLE?</Text>
                
                
                <View style={styles.roleClass}>
                    <TouchableOpacity style={styles.userClass} onPress={() => handleRoleSelect('user')}>
                        <FontAwesome6 name='user-large' color={'#1B1212'} size={35} />
                        <Text style={styles.roleTxt}>USER</Text>
                    </TouchableOpacity>
                </View>
                
                <View style={styles.roleClass}>
                    <TouchableOpacity style={styles.coachClass} onPress={() => handleRoleSelect('coach')}>
                        <FontAwesome6 name='user-group' color={'#1B1212'} size={35} />
                        <Text style={styles.roleTxt}>COACH</Text>
                    </TouchableOpacity>
                </View>
            </View>

            <View style={styles.bottomQuote}>
                <Text style={styles.mainTxtBottom}>Harmony Unleashed</Text>
                <Text style={styles.subTxtBottom}>Your Ultimate Guide to Guitar Chords!</Text>
            </View>

            <TouchableOpacity style={styles.adminBtnCont}>
                <FontAwesome6 name='user-gear' color={'#fff'} size={12} style={styles.adminBtn} />
            </TouchableOpacity>
        </ScrollView>
        
    )
}


const styles = StyleSheet.create ({
    loadingContainer: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: '#0a0f1b',
    },

    mainCont: {
        flexGrow: 1,
        backgroundColor: '#0a0f1b',
        padding: 20,
        paddingTop: 0,
        gap: 20,
        alignItems: 'center',
    },

    //#region LogoBox 
    logoCont: {
        display: 'flex',
        alignItems: 'center',
        marginBottom: 30,
    },
    mainLogoBG: {
        width: 450,
        height: 220,
        justifyContent: 'center',
        alignItems: 'center',
        borderBottomEndRadius: 200,
        borderBottomStartRadius: 200,
        overflow: 'hidden', 
    },
    mainLogo: {
        marginTop: 10,
        width: 140,
        height: 140,
    },
    mainLogoTxt: {
        color: '#FFF',
        fontSize: 30,
        fontFamily: 'Poppins-ExtraB'
    },
    //#endregion LogoBox 

    classPickCont: {
        display: 'flex',
        backgroundColor: '#1A2433',
        paddingVertical: 50,
        paddingHorizontal: 25,
        alignItems: 'center',
        borderRadius: 10,
        gap: 20,
        width: '95%',
    },

    classPickQuote: {
        color: '#FFF',
        fontSize: 21,
        fontFamily: 'Montserrat-ExtraB',
        textAlign: 'center',
        width: 280,
        letterSpacing: 1.5,
    },

    roleClass: {
        display: 'flex',
        flexDirection: 'column',
        gap: 40,
    },

    userClass: {
        display: 'flex',
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'space-between',
        gap: 20,
        backgroundColor: '#A8F94F',
        width: '80%',
        paddingVertical: 10,
        paddingHorizontal: 15,
        borderRadius: 10,
    },
    coachClass: {
        display: 'flex',
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'space-between',
        gap: 20,
        backgroundColor: '#80E0B4',
        width: '80%',
        paddingVertical: 10,
        paddingHorizontal: 15,
        borderRadius: 10,
    },
    
    roleTxt: {
        color: '#1B1212',
        fontSize: 23,
        fontFamily: 'Montserrat-Bold',
    },  

    //# Bottom Quote
    bottomQuote: {
        display: 'flex',
        alignItems: 'center',
        marginTop: 60,
        marginBottom: 5,
    },
    mainTxtBottom: {
        color: '#FFF',
        fontSize: 13,
        textAlign: 'center',
        width: '75%',
        fontFamily: 'Montserrat-Reg',
    },
    subTxtBottom: {
        color: '#FFF',
        fontSize: 11,
        textAlign: 'center',
        width: '80%',
        fontFamily: 'Montserrat-Thin',
    },

    adminBtnCont: {
        display: 'flex',
        alignSelf: 'flex-end',
        padding: 10,
        borderRadius: 50,
    },

    adminBtn: {
        textAlign: 'center',
    },
})
export default ClassPicker;

import React, {useEffect, useState} from 'react';
import { View, TouchableOpacity, TouchableHighlight, Text, Image, StyleSheet, ScrollView, ActivityIndicator } from 'react-native';
import { useTheme } from '../ThemeContext';
import { Linking } from 'react-native';
import { useFonts } from 'expo-font';
import { safeAreaView } from 'react-native-safe-area-context';
import Ionicons from  'react-native-vector-icons/Ionicons';
import AsyncStorage from '@react-native-async-storage/async-storage';


const CreditsPage = ({ navigation }) => {
    const { isDarkMode, toggleTheme, currentTheme } = useTheme();
    const [selectedTheme, setSelectedTheme] = useState(isDarkMode ? 'dark' : 'light');

    useEffect(() => {
        setSelectedTheme(isDarkMode ? 'dark' : 'light');
    }, [isDarkMode]);

    const handleThemeChange = async (theme) => {
        setSelectedTheme(theme);

        await AsyncStorage.setItem('theme', theme);
        if ((theme === 'dark' && !isDarkMode) || (theme === 'light' && isDarkMode)) {
            toggleTheme();
        }
    };

    const [fontsLoaded] = useFonts({
        'Poppins-ExtraB': require('../assets/fonts/Poppins/Poppins-ExtraBold.ttf'),
        'Montserrat-ExtraB': require('../assets/fonts/Montserrat/static/Montserrat-ExtraBold.ttf'),
        'Montserrat-Bold': require('../assets/fonts/Montserrat/static/Montserrat-Bold.ttf'),
        'Montserrat-Med': require('../assets/fonts/Montserrat/static/Montserrat-Medium.ttf'),
        'Montserrat-Reg': require('../assets/fonts/Montserrat/static/Montserrat-Regular.ttf'),
        'Montserrat-Thin': require('../assets/fonts/Montserrat/static/Montserrat-Light.ttf'),
        'RedHat-Bold': require('../assets/fonts/Red_Hat_Display/static/RedHatDisplay-Bold.ttf'),
    });

    if (!fontsLoaded) {
        return (
            <View style={styles.loadingContainer}>
                <ActivityIndicator size="large" color="#A8F94F" />
            </View>
        );
    }

    return(
        <ScrollView contentContainerStyle={[styles.mainCont, {backgroundColor: currentTheme.backgroundColor}]}>
            <View style={[styles.labelCont, {backgroundColor: currentTheme.backgroundColor}]}>
                <TouchableOpacity style={styles.backBtn} onPress={() => navigation.navigate('mainTabs')}>
                    <Ionicons name='arrow-back' color="white" size={24} style={[styles.manageSVG, {color: currentTheme.textColor}]} />
                </TouchableOpacity>
            </View>

            <Text style={[styles.appTrademark, {color: currentTheme.textColor}]}>G! Tara Na!</Text>

            <View style={styles.quoteCont}>
                <Text style={[styles.mainTxt, {color: currentTheme.textColor}]}>Harmony Unleashed</Text>
                <Text style={[styles.subTxt, {color: currentTheme.textColor}]}>Your Ultimate Guide to Guitar Chords!</Text>
            </View>

            <View style={styles.contriCont}>
                <Text style={[styles.contriLabel, {color: currentTheme.textColor}]}>Contributors</Text>
                <TouchableOpacity onPress={() => {
                    Linking.openURL("https://www.instagram.com/lawlensphotography/")
                }}
                    style={styles.contriNameImg}
                >
                    <Image source={require('../assets/Contributors/Ace.jpg')} style={styles.contriJPG}/>
                    <Text style={[styles.contriTXT, {color: currentTheme.textColor}]}>Ace Clavano</Text>
                </TouchableOpacity>
                <TouchableOpacity onPress={() => {
                    Linking.openURL("https://www.instagram.com/airacaughton4k/")
                }}
                    style={styles.contriNameImg}
                >
                    <Image source={require('../assets/Contributors/Aira.png')} style={styles.contriJPG}/>
                    <Text style={[styles.contriTXT, {color: currentTheme.textColor}]}>Aira Estur</Text>
                </TouchableOpacity>
                <TouchableOpacity onPress={() => {
                    Linking.openURL("https://www.instagram.com/cmllnieto_/")
                }}
                    style={styles.contriNameImg}
                >
                    <Image source={require('../assets/Contributors/Cams.jpg')} style={styles.contriJPG}/>
                    <Text style={[styles.contriTXT, {color: currentTheme.textColor}]}>Camille Nieto</Text>
                </TouchableOpacity>
                <TouchableOpacity onPress={() => {
                    Linking.openURL("https://www.instagram.com/ec_pzzz/")
                }}
                    style={styles.contriNameImg}
                >
                    <Image source={require('../assets/Contributors/Eros.jpg')} style={styles.contriJPG}/>
                    <Text style={[styles.contriTXT, {color: currentTheme.textColor}]}>Eros Ruffy</Text>
                </TouchableOpacity>
                <TouchableOpacity onPress={() => {
                    Linking.openURL("https://www.facebook.com/shawn.maurin")
                }}
                    style={styles.contriNameImg}
                >
                    <Image source={require('../assets/Contributors/Shawn.jpg')} style={styles.contriJPG}/>
                    <Text style={[styles.contriTXT, {color: currentTheme.textColor}]}>Shawn Maurin</Text>
                </TouchableOpacity>
            </View>

            <View style={styles.frameworkCont}>
                <Text style={[styles.frameworkLabel, {color: currentTheme.textColor}]}>Frameworks and Languages</Text>
                <View style={styles.frame1}>
                    <Image source={require('../assets/react-native.png')} style={styles.frameworkJPG1}/>
                    <Image source={require('../assets/js.png')} style={styles.frameworkJPG1}/>
                </View>
                <View style={styles.frame2}>
                    <Image source={isDarkMode ? require('../assets/expo.png') : require('../assets/expo-2.png')} style={styles.frameworkJPG2}/>
                    <Image source={require('../assets/supabase.png')} style={styles.frameworkJPG2}/>
                </View>
            </View>

            <Text style={[styles.rightsReserve, {color: currentTheme.textColor}]}>@ 2024 G! Tara Na! by AACE. All Rights Reserved</Text>
        </ScrollView>
    )
}

const styles = StyleSheet.create({
    loadingContainer: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: '#0a0f1b',
    },

    mainCont: {
        flexGrow: 1,
        backgroundColor: '#0a0f1b',
        padding: 20,
        paddingTop: 40,
        paddingBottom: 50,
    },
    appTrademark: {
        marginTop: 30,
        color: '#FFF',
        textAlign: 'center',
        fontSize: 45,
        fontFamily: 'Poppins-ExtraB'
    },

    rightsReserve: {
        textAlign: 'center',
        color: '#FFF',
        marginTop: 50,
        fontFamily: 'Montserrat-Thin',
        fontSize: 11,
    },
    
    //#region Quote Container
    quoteCont:{
        marginTop: 10,
        display: 'flex',
        flexDirection: 'column',
        gap: 5,
    },
    mainTxt: {
        color: '#FFF',
        fontSize: 23,
        textAlign: 'center',
        fontFamily: 'Montserrat-Bold',
    },  
    subTxt: {
        color: '#FFF',
        fontSize: 16,
        textAlign: 'center',
        fontFamily: 'Montserrat-Med',
        opacity: 0.6,
        paddingHorizontal: 10,
    },  
    //#endregion Quote Container

    //#region Label Container
    labelCont: {
        display: 'flex',
        flexDirection: 'row',
        alignItems: 'center',
        gap: 10
    },
    manageSVG: {
        padding: 7.5,
        width: 40,
        height: 40,
        textAlign: 'center'
    },
    //#endregion Label Container

    //#region Contributors
    contriCont: {
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        marginTop: 40,
    },
    contriLabel: {
        color: '#FFF',
        fontSize: 25,
        fontFamily: 'Montserrat-Med',
    },
    contriNameImg: {
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
    },
    contriJPG: {
        width: 120,
        height: 120,
        borderRadius: 60,
        marginVertical: 20
    },
    contriTXT: {
        color: '#FFF',
        fontSize: 21,
        textAlign: 'center',
        fontFamily: 'Montserrat-Reg',
    },  

    //#endregion Contributors

    //#region Frameworks and Languages
    frameworkCont: {
        display: 'flex',
        alignItems: 'center',
        marginTop: 40,
        gap: 30,
    },
    frameworkJPG1: {
        width: 90,
        height: 90,
    },
    frameworkJPG2: {
        width: 110,
        height: 110,
    },
    frameworkLabel: {
        color: '#FFF',
        fontSize: 25,
        textAlign: 'center',
        fontFamily: 'Montserrat-Med',
    },
    frame1: {
        display: 'flex',
        flexDirection: 'row',
        gap: 50,
    },
    frame2: {
        display: 'flex',
        flexDirection: 'row',
        gap: 35,
    },
    //#endregion Frameworks and Languages
})

export default CreditsPage;

import { View, TouchableOpacity, TextInput, Text, Image, ImageBackground, StyleSheet, ScrollView, Alert, ActivityIndicator } from 'react-native';
import React, {useState} from 'react';
import { useAppContext } from '../AppContext';
import { useFonts } from 'expo-font';
import { safeAreaView } from 'react-native-safe-area-context';
import MaterialIcons from 'react-native-vector-icons/MaterialIcons';


const Login = ({ route, navigation }) => {
    const [selected, setSelected] = useState('Login');

    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [isPasswordVisible, setIsPasswordVisible] = useState(false);
    const { logIn } = useAppContext();

    const togglePasswordVisibility = () => {
        setIsPasswordVisible(!isPasswordVisible);
    };

    const handleAuth = async () => {
        if (!email || !password) {
            Alert.alert("Please fill in the required fields.");
            return;
        }

        if (password.length < 7) {
            Alert.alert("Please enter a password with a minimum of 7 characters.");
            return;
        }

        const isLoginCorrect = await logIn(email, password);

        if (isLoginCorrect) {
            navigation.navigate('mainTabs');
        }
        else {
            Alert.alert("Error during Log-in", "Invalid login credentials");
        }
    }

    // Loading Graphic 
    const [fontsLoaded] = useFonts({
        'Poppins-ExtraB': require('../assets/fonts/Poppins/Poppins-ExtraBold.ttf'),
        'Montserrat-Bold': require('../assets/fonts/Montserrat/static/Montserrat-Bold.ttf'),
        'Montserrat-Med': require('../assets/fonts/Montserrat/static/Montserrat-Medium.ttf'),
        'RedHat-Bold': require('../assets/fonts/Red_Hat_Display/static/RedHatDisplay-Bold.ttf'),
    });

    if (!fontsLoaded) {
        return (
            <View style={styles.loadingContainer}>
                <ActivityIndicator size="large" color="#A8F94F" />
            </View>
        );
    }

    return (
        <ScrollView contentContainerStyle={styles.mainCont}>
            <View style={styles.logoCont}>
                <ImageBackground source={require('../assets/loginSignUpBG.png')} style={styles.mainLogoBG}>
                    <Image source={require('../assets/icon4-1.png')} style={styles.mainLogo} />
                    <Text style={styles.mainLogoTxt}>G! Tara Na!</Text>
                </ImageBackground>
            </View>

            <View style={styles.loginContainer}>
                <View style={styles.userMethodCont}>
                    <TouchableOpacity 
                        style={[styles.button, 
                            selected === 'SignUp' ? styles.activeButton : 
                            styles.inactiveButton
                        ]} 
                        onPress={() => {setSelected('Login')}} 
                    >
                        <Text style={[styles.buttonText, 
                            selected === 'SignUp' ? styles.activeText : 
                            styles.inactiveText
                        ]}
                        >
                            {'Login'}
                        </Text>
                    </TouchableOpacity>
                    <TouchableOpacity 
                        style={[styles.button, 
                            selected === 'SignUp' ? styles.activeButton : 
                            styles.inactiveButton
                        ]}                         
                        onPress={() => {setSelected('SignUp'); 
                            navigation.navigate('SignUp')
                        }} 
                    >
                        <Text style={[styles.buttonText, 
                            selected === 'SignUp' ? styles.activeText : 
                            styles.inactiveText]}
                        >
                            {'SignUp'}
                        </Text>
                    </TouchableOpacity>
                </View>
                
                <TextInput
                    style={styles.inputFields}
                    placeholder="Email"
                    placeholderTextColor={"#FFF"}
                    value={email}
                    onChangeText={setEmail}
                    autoCapitalize="none"
                />

                <View style={styles.passwordInputCont}>
                    <TextInput
                        style={styles.passwordInput}
                        placeholder="Password"
                        placeholderTextColor={"#FFF"}
                        value={password}
                        onChangeText={setPassword}
                        secureTextEntry={!isPasswordVisible}
                    />
                    <TouchableOpacity onPress={togglePasswordVisibility}>
                        <MaterialIcons
                            name={isPasswordVisible ? 'visibility' : 'visibility-off'}
                            size={20}
                            color='#FFF'
                        />
                    </TouchableOpacity>
                </View>

                <TouchableOpacity style={styles.loginBtn} onPress={handleAuth}>
                    <Text style={styles.loginBtnTxt}>{'Login'}</Text>
                </TouchableOpacity>
            </View>

            <View style={styles.bottomQuote}>
                <Text style={styles.mainTxtBottom}>Harmony Unleashed</Text>
                <Text style={styles.subTxtBottom}>Your Ultimate Guide to Guitar Chords!</Text>
            </View>
        </ScrollView>
    )
}

const styles = StyleSheet.create({
    loadingContainer: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: '#0a0f1b',
    },

    mainCont: {
        flexGrow: 1,
        backgroundColor: '#0a0f1b',
        padding: 20,
        paddingTop: 0,
        gap: 20,
        alignItems: 'center',
    },

    //#region LogoBox 
    logoCont: {
        display: 'flex',
        alignItems: 'center',
        marginBottom: 30,
    },
    mainLogoBG: {
        width: 450,
        height: 220,
        justifyContent: 'center',
        alignItems: 'center',
        borderBottomEndRadius: 200,
        borderBottomStartRadius: 200,
        overflow: 'hidden', 
    },
    mainLogo: {
        marginTop: 10,
        width: 140,
        height: 140,
    },
    mainLogoTxt: {
        color: '#FFF',
        fontSize: 30,
        fontFamily: 'Poppins-ExtraB',
    },
    //#endregion LogoBox 

    //#region EntryMethods
    userMethodCont: {
        flexDirection: 'row',
        borderRadius: 25,
        borderWidth: 2,
        overflow: 'hidden',
    },
    button: {
        flex: 1, 
        paddingVertical: 10,
        justifyContent: 'center',
        alignItems: 'center',
    },
    activeButton: {
        backgroundColor: '#A8F94F', 
    },
    inactiveButton: {
        backgroundColor: '#0a0f1b', 
    },
    buttonText: {
        fontSize: 16,
        fontFamily: 'RedHat-Bold',
    },
    activeText: {
        color: '#000', 
        textTransform: 'uppercase',
        fontFamily: 'RedHat-Bold',
    },
    inactiveText: {
        color: '#FFF', 
        textTransform: 'uppercase',
        fontFamily: 'RedHat-Bold',
    },
    //#endregion EntryMethods

    //#region LoginBox 
    loginContainer: {
        display: 'flex',
        backgroundColor: '#1A2433',
        paddingVertical: 30,
        paddingHorizontal: 25,
        alignItems: 'center',
        borderRadius: 10,
        gap: 20,
        width: '95%',
    },
    inputFields: {
        width: '90%',
        borderBottomWidth: 1,
        marginBottom: 20,
        padding: 8,
        borderColor: '#FFF',
        color: '#FFF',
        fontFamily: 'Montserrat-Bold',
    },
    passwordInputCont: {
        flexDirection: 'row',
        alignItems: 'center',
        borderBottomWidth: 1,
        borderColor: '#FFF',
        marginBottom: 20,
        width: '90%',
    },
    passwordInput: {
        flex: 1,
        color: '#FFF',
        padding: 8,
        fontFamily: 'Montserrat-Bold',
    },
    loginBtn: {
        backgroundColor: '#A8F94F', 
        padding: 8,
        borderRadius: 5,
        marginBottom: 5,
    },
    loginBtnTxt: {
        color: '#000',
        fontSize: 16,
        fontFamily: 'RedHat-Bold',
        textTransform: 'uppercase',
    },
    //#endregion LoginBox 

    // Bottom Quote
    bottomQuote: {
        display: 'flex',
        alignItems: 'center',
        marginTop: 60,
        marginBottom: 30,
    },
    mainTxtBottom: {
        color: '#FFF',
        fontSize: 13,
        textAlign: 'center',
        width: '75%',
        fontFamily: 'Montserrat-Reg',
    },
    subTxtBottom: {
        color: '#FFF',
        fontSize: 11,
        textAlign: 'center',
        width: '80%',
        fontFamily: 'Montserrat-Thin',
    },
})

export default Login;

import React, {useEffect, useState} from 'react';
import { View, TouchableOpacity, TouchableHighlight, Text, TextInput, Image, StyleSheet, ScrollView, Alert, ActivityIndicator } from 'react-native';
import { useAppContext } from '../AppContext';
import { useTheme } from '../ThemeContext';
import { useFonts } from 'expo-font';
import { safeAreaView } from 'react-native-safe-area-context';
import * as ImagePicker from 'expo-image-picker';
import Ionicons from 'react-native-vector-icons/Ionicons';
import AntDesign from 'react-native-vector-icons/AntDesign';
import MaterialIcons from 'react-native-vector-icons/MaterialIcons';


const ManageUser = ({ navigation }) => {
    const { userId, fetchUserData, updateUserDetails, logOut, uploadProfilePicture  } = useAppContext();
    const [firstName, setFirstName] = useState('');
    const [lastName, setLastName] = useState('');
    const [username, setUserName] = useState('');
    const [age, setAge] = useState('');
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [joinDate, setJoinDate] = useState('');
    const [isPasswordVisible, setIsPasswordVisible] = useState(false);
    const [profilePic, setProfPic] = useState('');
    const { isDarkMode, toggleTheme, currentTheme } = useTheme();
    const [selectedTheme, setSelectedTheme] = useState(isDarkMode ? 'dark' : 'light');

    useEffect(() => {
        setSelectedTheme(isDarkMode ? 'dark' : 'light');
    }, [isDarkMode]);

    const handleThemeChange = async (theme) => {
        setSelectedTheme(theme);

        await AsyncStorage.setItem('theme', theme);
        if ((theme === 'dark' && !isDarkMode) || (theme === 'light' && isDarkMode)) {
            toggleTheme();
        }
    };

    const [fontsLoaded] = useFonts({
        'Poppins-ExtraB': require('../assets/fonts/Poppins/Poppins-ExtraBold.ttf'),
        'Montserrat-ExtraB': require('../assets/fonts/Montserrat/static/Montserrat-ExtraBold.ttf'),
        'Montserrat-Bold': require('../assets/fonts/Montserrat/static/Montserrat-Bold.ttf'),
        'Montserrat-Med': require('../assets/fonts/Montserrat/static/Montserrat-Medium.ttf'),
        'Montserrat-Reg': require('../assets/fonts/Montserrat/static/Montserrat-Regular.ttf'),
        'RedHat-Bold': require('../assets/fonts/Red_Hat_Display/static/RedHatDisplay-Bold.ttf'),
    });

    if (!fontsLoaded) {
        return (
            <View style={styles.loadingContainer}>
                <ActivityIndicator size="large" color="#A8F94F" />
            </View>
        );
    }


    useEffect(() => {
        console.log('userId in UserProfile:', userId);
        const getUserData = async () => {
            const userData = await fetchUserData(userId);
            setEmail(userData.email)
            setUserName(userData.username);
            setFirstName(userData.first_name);
            setLastName(userData.last_name);
            setAge(userData.age);
            setJoinDate(userData.created_at)
            setProfPic(userData.profile_picture)
        };

        getUserData();
    }, [userId]);

    const togglePasswordVisibility = () => {
        setIsPasswordVisible(!isPasswordVisible);
    };

    const handleUpdate = async () => {
        console.log("Update Btn pressed.")

        const initialData = {
            email: email.trim(),
            username: username.trim(),
            name: name.trim(),
            age: age ? age : null,
        };

        const updatedData = Object.fromEntries(
            Object.entries(initialData).filter(([_, v]) => v != null && v !== '')
        );

        if (Object.keys(updatedData).length === 0 && !password.trim()) {
            Alert.alert('Nothing to update');
            return;
        }

        try {
            // Log the current input for debugging
            console.log('Current Input:', updatedData);
    
            // If user details are present, update them
            if (Object.keys(updatedData).length > 0) {
                const result = await updateUserDetails(userId, updatedData);
                Alert.alert('Success, user details updated!');
            } else {
                Alert.alert('Error, user details failed to update.');
                console.log('Update result:', result);
            }
    
            // If the password is provided, update it
            if (password.trim()) {
                await updatePassword(password);
            }
        } catch (error) {
            console.error('Error updating user details or password:', error.message);
        }
    };

    const handleLogout = () => {
        Alert.alert(
          "Log Out", 
          "Are you sure you want to log out?", 
          [
            {
              text: "Cancel",
              style: "cancel"
            },
            {
              text: "Log Out",
              onPress: async () => {
                await logOut(),
              navigation.navigate("userAccountScreen")
                }
            }
            ]
        );
    };

    const selectProfilePicture = async () => {
        try {
            const result = await ImagePicker.launchImageLibraryAsync({
                mediaTypes: ImagePicker.MediaTypeOptions.Images,
                allowsEditing: true,
                aspect: [1, 1],
                quality: 1,
            });

            if (!result.canceled) {
                const imageUri = result.assets[0].uri;
                const imageUrl = await uploadProfilePicture(userId, imageUri);
                setProfPic(imageUrl);
            }
        } catch (error) {
            console.error('Error selecting image:', error);
        }
    };

    return (
        <ScrollView style={[styles.mainCont, {backgroundColor: currentTheme.backgroundColor}]}>
            <View style={[styles.headerCont, {backgroundColor: currentTheme.backgroundColor}]}>
                <TouchableOpacity style={styles.backBtn} onPress={() => navigation.navigate('User')}>
                    <Ionicons name='arrow-back' color="white" size={25} style={[styles.manageSVG, {color: currentTheme.textColor}]} />
                </TouchableOpacity>

                <TouchableOpacity style={[styles.logoutCont, {backgroundColor: currentTheme.buttonColor}]} onPress={handleLogout}>
                    <AntDesign name='logout' color={'#000'} size={16}/>
                    <Text style={[styles.logoutTxt, {color: currentTheme.searchColor}]}>Logout</Text>
                </TouchableOpacity>
            </View>


            <Text style={[styles.manageUserLabel, {color: currentTheme.textColor}]}>Manage User</Text>

            <View style={[styles.infoCont, {backgroundColor: currentTheme.backgroundColor2}]}>
                <Text style={[styles.basicInfoLabel, {color: currentTheme.textColor}]}>User Basic Information</Text>

                <View style={styles.infoContainer}>
                    <View style={styles.profilePic}>
                        <Image source={profilePic ? { uri: profilePic } : require('../assets/placeholderImg.png')} style={styles.userProfPic}/>

                        <TouchableOpacity onPress={selectProfilePicture} style={[styles.uploadBtnCont, {backgroundColor: currentTheme.buttonColor}]}> 
                            <AntDesign name='clouduploado' color={'#000'} size={16} />
                            <Text style={[styles.uploadBtn, {color: currentTheme.searchColor}]}>Upload</Text>
                        </TouchableOpacity>

                        <View style={styles.joinDateCont}>
                            <Text style={[styles.userJoin, {color: currentTheme.textColor}]}>{joinDate}</Text>
                            <Text style={[styles.userJoinLab, {color: currentTheme.textColor}]}>Join Date</Text>
                        </View>
                    </View>

                    <View style={styles.basicInfo}>
                        <>
                            <TextInput placeholder='Name' placeholderTextColor={'#FFF'} value={firstName} onChangeText={setFirstName} style={[styles.infoInput, {color: currentTheme.textColor, borderColor: currentTheme.borderColor}]}/>
                            <Text style={[styles.infoLabel, {color: currentTheme.textColor}]}>First Name</Text>
                        </>
                        <>
                            <TextInput placeholder='Name' placeholderTextColor={'#FFF'} value={lastName} onChangeText={setLastName} style={[styles.infoInput, {color: currentTheme.textColor, borderColor: currentTheme.borderColor}]}/>
                            <Text style={[styles.infoLabel, {color: currentTheme.textColor}]}>Surname</Text>
                        </>
                        <>
                            <TextInput placeholder='Age' placeholderTextColor={'#FFF'} value={age} onChangeText={setAge} style={[styles.infoInput, {color: currentTheme.textColor, borderColor: currentTheme.borderColor}]}/>
                            <Text style={[styles.infoLabel, {color: currentTheme.textColor}]}>Age</Text>
                        </>
                    </View>
                </View>
                
                <View style={styles.userNameCont}>
                    <TextInput placeholder='UserName' placeholderTextColor={'#FFF'} value={username} onChangeText={setUserName} style={[styles.infoInputLong, {color: currentTheme.textColor, borderColor: currentTheme.borderColor}]}/>
                    <Text style={[styles.infoLabel, {color: currentTheme.textColor}]}>Username</Text>
                </View>

                <View style={styles.emailPassword}>
                    <Text style={[styles.emailPassLabel, {color: currentTheme.textColor}]}>Email & Password</Text>
                    <>
                        <TextInput placeholder='Email' placeholderTextColor={'#FFF'} value={email} onChangeText={setEmail} style={[styles.emailInput, {color: currentTheme.textColor, borderColor: currentTheme.borderColor}]}/>
                        <Text style={[styles.infoLabel, {color: currentTheme.textColor}]}>Email</Text>
                    </>
                    <View style={styles.passwordInputCont}>
                        <View style={styles.passwordCont}>
                            <TextInput placeholder='Password' placeholderTextColor={currentTheme.textColor} value={password} onChangeText={setPassword} style={[styles.passwordInput, {color: currentTheme.textColor, borderColor: currentTheme.borderColor}]} secureTextEntry={!isPasswordVisible} />
                            <Text style={[styles.infoLabel, {color: currentTheme.textColor}]}>Password</Text>
                        </View>

                        <TouchableOpacity onPress={togglePasswordVisibility} style={styles.visibilityBtn}>
                            <MaterialIcons
                                name={isPasswordVisible ? 'visibility' : 'visibility-off'}
                                size={20}
                                color={currentTheme.textColor}
                            />
                        </TouchableOpacity>
                    </View>
                </View>

                <TouchableOpacity onPress={handleUpdate} style={[styles.updateBtn, {backgroundColor: currentTheme.buttonColor}]}
                >
                    <Text style={styles.updateBtnTxt}>Update</Text>
                </TouchableOpacity>
            </View>
        </ScrollView>
    )
}

const styles = StyleSheet.create({
    loadingContainer: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: '#0a0f1b',
    },

    //#region Main Preferences
    mainCont: {
        flexGrow: 1,
        backgroundColor: '#0a0f1b',
        padding: 20,
        paddingVertical: 45,
    },
    manageSVG: {
        padding: 7.5,
        width: 40,
        height: 40,
        textAlign: 'center'
    },
    headerCont: {
        display: 'flex',
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        gap: 30,
        marginBottom: 5,
    },
    manageUserLabel: {
        color: '#FFF',
        fontSize: 28,
        fontFamily: 'Montserrat-ExtraB',
        textTransform: 'uppercase',
        textAlign: 'center',
        marginTop: 20,
        marginBottom: 25,
    },
    infoCont: {
        backgroundColor: '#1A2433',
        display: 'flex',
        gap: 20,
        justifyContent: 'space-evenly',
        paddingHorizontal: 25,
        paddingVertical: 30,
        marginBottom: 90,
        borderRadius: 10,
    },
    infoContainer: {
        display: 'flex',
        flexDirection: 'row',
        justifyContent: 'space-between',
        gap: 15,
    },
    //#endregion Main Preferences

    //#region Logout
    logoutCont: {
        display: 'flex',
        flexDirection: 'row',
        alignItems: 'center',
        paddingHorizontal: 10,
        backgroundColor: '#A8F94F',
        width: 95,
        height: 30,
        borderRadius: 5,
        gap: 10,
        marginRight: 5,
    },
    logoutTxt: {
        color: '#000',
        fontSize: 12,
        textTransform: 'uppercase',
        fontFamily: 'RedHat-Bold',
    },
    //#endregion Logout

    //#region Profile Pic Container && Basic Information 
    profilePic: {
        display: 'flex',
        gap: 15,
    },
    basicInfo: {
        display: 'flex',
        gap: 10,
        justifyContent: 'flex-end',
    },
    basicInfoLabel: {
        color: '#FFF',
        fontSize: 21,
        fontFamily: 'Montserrat-Bold',
        textAlign: 'center',
    },
    userProfPic: {
        borderWidth: 1,
        borderColor: '#fff',
        borderRadius: 60,
        width: 110,
        height: 110,
    },
    uploadBtnCont: {
        display: 'flex',
        flexDirection: 'row',
        alignItems: 'center',
        paddingHorizontal: 10,
        backgroundColor: '#A8F94F',
        width: 95,
        height: 30,
        borderRadius: 5,
        gap: 10,
    },
    uploadBtn: {
        color: '#000',
        fontSize: 12,
        textTransform: 'uppercase',
        fontFamily: 'RedHat-Bold',
    },
    joinDateCont: {
        gap: 5,
    },
    userJoinLab: {
        color: '#fff',
        fontSize: 18,
        fontFamily: 'Montserrat-Bold',
    },
    userJoin: {
        color: '#fff',
        fontSize: 15,
        fontFamily: 'Montserrat-Med',
        opacity: 0.8,
    },
    infoInput: {
        borderWidth: 1.5,
        borderColor: '#FFF',
        padding: 3,
        paddingHorizontal: 10,
        borderRadius: 5,
        width: 140,
        color: '#fff',
        fontSize: 15,
        fontFamily: 'Montserrat-Med',
        opacity: 0.8,
    },
    userNameCont: {
        display: 'flex',
        gap: 10,
    },
    infoInputLong: {
        borderWidth: 1.5,
        borderColor: '#FFF',
        padding: 5,
        paddingHorizontal: 10,
        color: '#fff',
        fontSize: 15,
        fontFamily: 'Montserrat-Med',
        opacity: 0.8,
        borderRadius: 5,
    },
    infoLabel: {
        color: '#fff',
        fontSize: 15,
        fontFamily: 'Montserrat-Bold',
        marginLeft: 3,
    },
    //#endregion Basic Information

    //#region Email & Password 
    emailPassword: {
        display: 'flex',
        gap: 15,
    },
    emailPassLabel: {
        color: '#FFF',
        fontSize: 21,
        fontFamily: 'Montserrat-Bold',
        textAlign: 'center',
    },
    emailInput: {
        borderWidth: 1.5,
        borderColor: '#FFF',
        padding: 3,
        paddingHorizontal: 10,
        borderRadius: 5,
        color: '#fff',
        fontSize: 15,
        fontFamily: 'Montserrat-Med',
        opacity: 0.8,
    },
    passwordCont: {
        display: 'flex',
        gap: 15,
    },
    passwordInput: {
        borderWidth: 1.5,
        borderColor: '#FFF',
        padding: 3,
        paddingHorizontal: 10,
        borderRadius: 5,
        color: '#fff',
        fontSize: 15,
        fontFamily: 'Montserrat-Med',
        opacity: 0.8,
        width: 270,
    },
    passwordInputCont: {
        flexDirection: 'row',
        alignItems: 'center',
        marginBottom: 20,
    },
    visibilityBtn: {
        position: 'relative',
        left: -30,
        top: -20,
        opacity: 0.8,
    },
    //#endregion Email & Password 

    updateBtn: {
        backgroundColor: '#A8F94F', 
        padding: 8,
        borderRadius: 5,
    },
    updateBtnTxt: {
        color: '#000',
        fontSize: 15,
        fontFamily: 'Montserrat-Bold',
        textAlign: 'center'
    },
})

export default ManageUser;


import React, {useEffect, useState} from 'react';
import { View, TouchableOpacity, Text, Image, StyleSheet, ScrollView, ActivityIndicator, Switch } from 'react-native';
import { useTheme } from '../ThemeContext';
import { useFonts } from 'expo-font';
import { safeAreaView } from 'react-native-safe-area-context';
import Feather from 'react-native-vector-icons/Feather';
import FontAwesome5 from 'react-native-vector-icons/FontAwesome5';
import FontAwesome6 from 'react-native-vector-icons/FontAwesome6';
import Ionicons from 'react-native-vector-icons/Ionicons';
import IconDark from '../assets/icon4-1.png';
import IconLight from '../assets/icon4-2.png';


const NotificationsSet = ({ navigation }) => {
    const { isDarkMode, toggleTheme, currentTheme } = useTheme();
    const [selectedTheme, setSelectedTheme] = useState(isDarkMode ? 'dark' : 'light');
    const [isEnabled, setIsEnabled] = useState(false);
    const toggleSwitch = () => setIsEnabled(previousState => !previousState);


    useEffect(() => {
        setSelectedTheme(isDarkMode ? 'dark' : 'light');
    }, [isDarkMode]);

    const handleThemeChange = async (theme) => {
        setSelectedTheme(theme);

        await AsyncStorage.setItem('theme', theme);
        if ((theme === 'dark' && !isDarkMode) || (theme === 'light' && isDarkMode)) {
            toggleTheme();
        }
    };

    const [fontsLoaded] = useFonts({
        'Poppins-ExtraB': require('../assets/fonts/Poppins/Poppins-ExtraBold.ttf'),
        'Montserrat-ExtraB': require('../assets/fonts/Montserrat/static/Montserrat-ExtraBold.ttf'),
        'Montserrat-Bold': require('../assets/fonts/Montserrat/static/Montserrat-Bold.ttf'),
        'Montserrat-Med': require('../assets/fonts/Montserrat/static/Montserrat-Medium.ttf'),
        'Montserrat-Reg': require('../assets/fonts/Montserrat/static/Montserrat-Regular.ttf'),
        'Montserrat-Thin': require('../assets/fonts/Montserrat/static/Montserrat-Light.ttf'),
        'RedHat-Bold': require('../assets/fonts/Red_Hat_Display/static/RedHatDisplay-Bold.ttf'),
    });

    if (!fontsLoaded) {
        return (
            <View style={styles.loadingContainer}>
                <ActivityIndicator size="large" color="#A8F94F" />
            </View>
        );
    }

    return (
        <ScrollView contentContainerStyle={[styles.mainCont, {backgroundColor: currentTheme.backgroundColor}]}>
            <View style={[styles.labelCont, {backgroundColor: currentTheme.backgroundColor}]}>
                <TouchableOpacity style={styles.backBtn} onPress={() => navigation.navigate('mainTabs')}>
                    <Ionicons name='arrow-back' color="white" size={24} style={[styles.manageSVG, {color: currentTheme.textColor}]} />
                </TouchableOpacity>
            </View>

            <Text style={[styles.themeLabel, {color: currentTheme.textColor}]}>Notifications</Text>


            <View style={[styles.modePicker, {backgroundColor: currentTheme.backgroundColor2}]}>
                <Text style={[styles.notifsTxt, {color: currentTheme.textColor}]}>Allow Notifications</Text>
                <Switch 
                    trackColor={{false: '#767577', true: currentTheme.buttonColor}}
                    thumbColor={isEnabled ?  currentTheme.textColor :  currentTheme.textColor}
                    onValueChange={toggleSwitch}
                    value={isEnabled}
                />
            </View>
        </ScrollView>
    )
}

const styles = StyleSheet.create ({
    mainCont: {
        flexGrow: 1,
        padding: 20,
        paddingTop: 40,
    },

    labelCont: {
        display: 'flex',
        flexDirection: 'row',
        alignItems: 'center',
        gap: 10
    },

    manageSVG: {
        padding: 7.5,
        width: 40,
        height: 40,
        textAlign: 'center'
    },

    themeLabel: {
        fontSize: 28,
        fontFamily: 'Montserrat-ExtraB',
        textTransform: 'uppercase',
        textAlign: 'center',
        marginTop: 20,
        marginBottom: 25,
    },

    notifsTxt: {
        fontSize: 18,
        fontFamily: 'Montserrat-Med',
        textAlign: 'center',
    },

    modePicker: {
        display: 'flex',
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        marginVertical: 20,
        paddingHorizontal: 20,
        paddingVertical: 15,
        borderRadius: 5,
    },
})

export default NotificationsSet;

import React, {useEffect, useState} from 'react';
import { View, TouchableOpacity, TouchableHighlight, Text, Image, StyleSheet, ScrollView, Alert, ActivityIndicator } from 'react-native';
import { useAppContext } from '../AppContext';
import { useTheme } from '../ThemeContext';
import { useFonts } from 'expo-font';
import { safeAreaView } from 'react-native-safe-area-context';
import FontAwesome from 'react-native-vector-icons/FontAwesome';
import Entypo from 'react-native-vector-icons/Entypo';
import Ionicons from 'react-native-vector-icons/Ionicons';
import AntDesign from 'react-native-vector-icons/AntDesign';
import Octicons from  'react-native-vector-icons/Octicons';
import Feather from  'react-native-vector-icons/Feather';


const SettingsPage = ({ navigation }) => {
    const { logOut, userId, fetchUserData } = useAppContext();
    const [firstName, setFirstName] = useState('');
    const [lastName, setLastName] = useState('');
    const [userEmail, setUserEmail] = useState('');
    const [profilePic, setProfPic] = useState('');
    const { isDarkMode, toggleTheme, currentTheme } = useTheme();
    const [selectedTheme, setSelectedTheme] = useState(isDarkMode ? 'dark' : 'light');

    useEffect(() => {
        setSelectedTheme(isDarkMode ? 'dark' : 'light');
    }, [isDarkMode]);

    const handleThemeChange = async (theme) => {
        setSelectedTheme(theme);

        await AsyncStorage.setItem('theme', theme);
        if ((theme === 'dark' && !isDarkMode) || (theme === 'light' && isDarkMode)) {
            toggleTheme();
        }
    };

    
    useEffect(() => {
        console.log('userId in UserProfile:', userId);
        const getUserData = async () => {
            const userData = await fetchUserData(userId);
            setFirstName(userData.first_name);
            setLastName(userData.last_name);
            setUserEmail(userData.email)
            setProfPic(userData.profile_picture)
        };
        
        getUserData();
    }, [userId]);

    const handleLogout = () => {
        Alert.alert(
          "Log Out", 
          "Are you sure you want to log out?", 
            [
                {
                text: "Cancel",
                style: "cancel"
                },
                {
                text: "Log Out",
                onPress: async () => {
                    await logOut(),
                navigation.navigate("userAccountScreen")
                    }
                }
            ]
        );
    };

    const [fontsLoaded] = useFonts({
        'Poppins-ExtraB': require('../assets/fonts/Poppins/Poppins-ExtraBold.ttf'),
        'Montserrat-ExtraB': require('../assets/fonts/Montserrat/static/Montserrat-ExtraBold.ttf'),
        'Montserrat-Bold': require('../assets/fonts/Montserrat/static/Montserrat-Bold.ttf'),
        'Montserrat-Med': require('../assets/fonts/Montserrat/static/Montserrat-Medium.ttf'),
        'Montserrat-Reg': require('../assets/fonts/Montserrat/static/Montserrat-Regular.ttf'),
        'RedHat-Bold': require('../assets/fonts/Red_Hat_Display/static/RedHatDisplay-Bold.ttf'),
    });

    if (!fontsLoaded) {
        return (
            <View style={styles.loadingContainer}>
                <ActivityIndicator size="large" color="#A8F94F" />
            </View>
        );
    }

    return (
        <ScrollView contentContainerStyle={[styles.mainCont, {backgroundColor: currentTheme.backgroundColor}]}>
            <View style={[styles.headerCont, {color: currentTheme.textColor}]}>
                <TouchableOpacity style={styles.settingLabel}>
                    <Feather name='settings' color={'#FFF'} size={35} style={{color: currentTheme.textColor}}/>
                    <Text style={[styles.settingsTxt, {color: currentTheme.textColor}]}>Settings</Text>
                </TouchableOpacity>

                <TouchableOpacity style={[styles.logoutCont, {backgroundColor: currentTheme.buttonColor}]} onPress={handleLogout}>
                    <AntDesign name='logout' color={'#000'} size={16}/>
                    <Text style={styles.logoutTxt}>Logout</Text>
                </TouchableOpacity>

            </View>

            <View style={styles.userSettings}>
                <View style={styles.generalMenu}>
                    <Text style={[styles.generalLabel, {color: currentTheme.textColor}]}>General</Text>

                    <View style={styles.sectionContent}>
                        <TouchableOpacity style={styles.manageSection} onPress={() => navigation.navigate('ThemePicker')}>
                            <Octicons name='paintbrush' size={21} style={[styles.manageSVG, {backgroundColor: currentTheme.backgroundColor3}]} />
                            <Text style={[styles.btnTxt, {color: currentTheme.textColor}]}>Theme</Text>
                        </TouchableOpacity>

                        <TouchableOpacity style={styles.manageSection} onPress={() => navigation.navigate('NotificationsPanel')}>
                            <Ionicons name='notifications-outline' size={21} style={[styles.manageSVG, {backgroundColor: currentTheme.backgroundColor3}]} />
                            <Text style={[styles.btnTxt, {color: currentTheme.textColor}]}>Notifications</Text>
                        </TouchableOpacity>
                    </View>
                </View>

                <View style={styles.supportMenu}>
                    <Text style={[styles.supportLabel, {color: currentTheme.textColor}]}>Support</Text>

                    <View style={styles.sectionContent}>
                        <TouchableOpacity style={styles.manageSection} onPress={() => navigation.navigate('CreditsPage')}>
                            <FontAwesome name='trademark' size={21} style={[styles.manageSVG, {backgroundColor: currentTheme.backgroundColor3}]} />
                            <Text style={[styles.btnTxt, {color: currentTheme.textColor}]}>Credits</Text>
                        </TouchableOpacity>

                        <TouchableOpacity style={styles.manageSection}>
                            <Entypo name='documents' size={21} style={[styles.manageSVG, {backgroundColor: currentTheme.backgroundColor3}]} />
                            <Text style={[styles.btnTxt, {color: currentTheme.textColor}]}>FAQs</Text>
                        </TouchableOpacity>
                    </View>

                </View>
            </View>
        </ScrollView>
    )
}

const styles = StyleSheet.create({
    loadingContainer: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: '#0a0f1b',
    },

    mainCont: {
        flexGrow: 1,
        backgroundColor: '#0a0f1b',
        padding: 20,
        paddingTop: 50,
    },

    //#region Header
    headerCont: {
        display: 'flex',
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        marginBottom: 10,
        paddingHorizontal: 8,
    },  
    settingLabel: {
        display: 'flex',
        flexDirection: 'row',
        alignItems: 'center',
        gap: 10,
    },
    settingsTxt: {
        color: '#FFF',
        fontSize: 21,
        fontFamily: 'Poppins-ExtraB',
    },
    logoutCont: {
        display: 'flex',
        flexDirection: 'row',
        alignItems: 'center',
        paddingHorizontal: 10,
        backgroundColor: '#A8F94F',
        width: 95,
        height: 30,
        borderRadius: 5,
        gap: 10,
        marginRight: 5,
    },
    logoutTxt: {
        color: '#000',
        fontSize: 12,
        textTransform: 'uppercase',
        fontFamily: 'RedHat-Bold',
    },
    //#endregion Header

    //#region User Profile and Preferences Menu Section
    userSettings: {
        padding: 20,
        marginVertical: 20,
        marginHorizontal: 5,
        display: 'flex',
        alignItems: 'flex-start',
        justifyContent: 'space-evenly',
    },

    //#region General Menu
    generalMenu: {
        marginBottom: 20,
        gap: 10,
    },
    generalLabel: {
        color: '#fff',
        fontSize: 25,
        fontFamily: 'Montserrat-ExtraB',
    },
    sectionContent: {
        marginHorizontal: 15,
        marginTop: 5,
        display: 'flex',
        alignItems: 'flex-start',
        justifyContent: 'center',
        flexDirection: 'column',
        gap: 15,
    },
    manageSection: {
        display: 'flex',
        flexDirection: 'row',
        alignItems: 'center',
        gap: 30,
    },
    manageSVG: {
        padding: 7.5,
        width: 40,
        height: 40,
        backgroundColor: '#fff',
        borderRadius: 60,
        textAlign: 'center'
    },
    btnTxt: {
        color: '#fff',
        fontSize: 18,
        fontFamily: 'RedHat-Bold',
    },
    //#endregion General Menu
    
    //#region Support Menu
    supportMenu: {
        marginBottom: 20,
        gap: 10,
    },
    supportLabel: {
        color: '#fff',
        fontWeight: '800',
        fontSize: 25,
    },
    //#endregion Support Menu
    
    //#endregion User Profile and Preferences Menu Section

})

export default SettingsPage;

import { View, TouchableOpacity, TextInput, Text, Image, ImageBackground, StyleSheet, ScrollView, Alert, ActivityIndicator } from 'react-native';
import React, {useState} from 'react';
import { useAppContext } from '../AppContext';
import { useFonts } from 'expo-font';
import { safeAreaView } from 'react-native-safe-area-context';
import DateTimePicker from '@react-native-community/datetimepicker';
import MaterialIcons from 'react-native-vector-icons/MaterialIcons';

const SignUp = ({ route, navigation }) => {
    const [selected, setSelected] = useState('SignUp');
    const [date, setDate] = useState(new Date());
    const [show, setShow] = useState(false);
    const [dobString, setDobString] = useState('');

    const [email, setEmail] = useState('');
    const [username, setUsername] = useState('');
    const [firstname, setFirstName] = useState('');
    const [lastname, setLastName] = useState('');
    const [age, setAge] = useState('');
    const [password, setPassword] = useState('');
    const [isPasswordVisible, setIsPasswordVisible] = useState(false);
    const { role, signUp } = useAppContext();
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;


    const onChange = ( event, selectedDate ) => {
        const currentDate = selectedDate || date;
        setShow(false);
        setDate(currentDate);
        setDobString(currentDate.toLocaleDateString()); 
    }

    const handleAuth = async () => {
        if (!role) {
            Alert.alert("Role is not defined. Please select a role.");
            return;
        }

        if (!email || !password) {
            Alert.alert("Please fill in the required fields.");
            return;
        }

        if (!emailRegex.test(email)) {
            Alert.alert("Please enter a valid email address.");
            return;
        }

        if (password.length < 7) {
            Alert.alert("Please enter a password with a minimum of 7 characters.");
            return;
        }

        if (username.length < 3) {
            alert('Username should be at least 3 characters long.');
            return;
        }

        try {
            await signUp(email, username, firstname, lastname, age, password, role);
            navigation.navigate('mainTabs');
        } catch (error) {
            Alert.alert("Error during sign-up", error.message);
        }
    }

    const togglePasswordVisibility = () => {
        setIsPasswordVisible(!isPasswordVisible);
    };

    const [fontsLoaded] = useFonts({
        'Poppins-ExtraB': require('../assets/fonts/Poppins/Poppins-ExtraBold.ttf'),
        'Montserrat-Bold': require('../assets/fonts/Montserrat/static/Montserrat-Bold.ttf'),
        'Montserrat-Med': require('../assets/fonts/Montserrat/static/Montserrat-Medium.ttf'),
        'RedHat-Bold': require('../assets/fonts/Red_Hat_Display/static/RedHatDisplay-Bold.ttf'),
    });

    if (!fontsLoaded) {
        return (
            <View style={styles.loadingContainer}>
                <ActivityIndicator size="large" color="#A8F94F" />
            </View>
        );
    }
    

    return (
        <ScrollView contentContainerStyle={styles.mainCont}>
            <View style={styles.logoCont}>
                <ImageBackground source={require('../assets/loginSignUpBG.png')} style={styles.mainLogoBG}>
                    <Image source={require('../assets/icon4-1.png')} style={styles.mainLogo} />
                    <Text style={styles.mainLogoTxt}>G! Tara Na!</Text>
                </ImageBackground>
            </View>

            <View style={styles.signUpContainer}>
                <View style={styles.userMethodCont}>
                    <TouchableOpacity 
                        style={[styles.button, 
                            selected === 'SignUp' ? styles.activeButton : 
                            styles.inactiveButton
                        ]} 
                        onPress={() => {setSelected('Login'); 
                            navigation.navigate('Login')
                        }} 
                    >
                        <Text style={[styles.buttonText, 
                            selected === 'SignUp' ? styles.activeText : 
                            styles.inactiveText]}
                        >
                            {'Login'}
                        </Text>
                    </TouchableOpacity>
                    <TouchableOpacity style={[styles.button, 
                        selected === 'SignUp' ? styles.activeButton : 
                        styles.inactiveButton
                    ]} 
                        onPress={() => setSelected('SignUp')}>
                        <Text style={[styles.buttonText, 
                            selected === 'SignUp' ? styles.activeText : 
                            styles.inactiveText]}
                        >
                            {'SignUp'}
                        </Text>
                    </TouchableOpacity>
                </View>

                <TextInput
                    style={styles.inputFields}
                    placeholder="First Name"
                    placeholderTextColor={"#FFF"}
                    value={firstname}
                    onChangeText={setFirstName}
                    autoCapitalize="none"
                />
                
                <TextInput
                    style={styles.inputFields}
                    placeholder="Surname"
                    placeholderTextColor={"#FFF"}
                    value={lastname}
                    onChangeText={setLastName}
                    autoCapitalize="none"
                />

                <TextInput
                    style={styles.inputFields}
                    placeholder="Age"
                    placeholderTextColor={"#FFF"}
                    value={age}
                    onChangeText={setAge}
                    autoCapitalize="none"
                />

                <TextInput
                    style={styles.inputFields}
                    placeholder="Username"
                    placeholderTextColor={"#FFF"}
                    value={username}
                    onChangeText={setUsername}
                    autoCapitalize="none"
                />

                <TextInput
                    style={styles.inputFields}
                    placeholder="Email"
                    placeholderTextColor={"#FFF"}
                    value={email}
                    onChangeText={setEmail}
                    autoCapitalize="none"
                />

                <View style={styles.passwordInputCont}>
                    <TextInput
                        style={styles.passwordInput}
                        placeholder="Password"
                        placeholderTextColor={"#FFF"}
                        value={password}
                        onChangeText={setPassword}
                        secureTextEntry={!isPasswordVisible}
                    />
                    <TouchableOpacity onPress={togglePasswordVisibility}>
                        <MaterialIcons
                            name={isPasswordVisible ? 'visibility' : 'visibility-off'}
                            size={20}
                            color='#FFF'
                        />
                    </TouchableOpacity>
                </View>


                <TouchableOpacity onPress={()=> setShow(true)} style={styles.birthBtn}> 
                    <Text style={dobString ? styles.birthDateTxt : styles.birthBtnTxt}>
                        {dobString ? dobString : 'Date of Birth'}
                    </Text>
                </TouchableOpacity>
                {show && (
                    <DateTimePicker 
                        value={date}
                        mode='date'
                        is24Hour={true}
                        display='default'
                        onChange={onChange}
                    />
                )}

                <TouchableOpacity style={styles.signUpBtn} onPress={handleAuth}>
                    <Text style={styles.signUpBtnTxt}>{'SignUp'}</Text>
                </TouchableOpacity>
            </View>

            <View style={styles.bottomQuote}>
                <Text style={styles.mainTxtBottom}>Harmony Unleashed</Text>
                <Text style={styles.subTxtBottom}>Your Ultimate Guide to Guitar Chords!</Text>
            </View>
        </ScrollView>
    )
}

const styles = StyleSheet.create({
    loadingContainer: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: '#0a0f1b',
    },

    mainCont: {
        flexGrow: 1,
        backgroundColor: '#0a0f1b',
        padding: 20,
        paddingTop: 0,
        gap: 20,
        alignItems: 'center',
    },

    //#region LogoBox 
    logoCont: {
        display: 'flex',
        alignItems: 'center',
        marginBottom: 30,
    },
    mainLogoBG: {
        width: 450,
        height: 220,
        justifyContent: 'center',
        alignItems: 'center',
        borderBottomEndRadius: 200,
        borderBottomStartRadius: 200,
        overflow: 'hidden', 
    },
    mainLogo: {
        marginTop: 10,
        width: 140,
        height: 140,
    },
    mainLogoTxt: {
        color: '#FFF',
        fontSize: 30,
        fontFamily: 'Poppins-ExtraB'
    },
    //#endregion LogoBox 

    //#region EntryMethods
    userMethodCont: {
        flexDirection: 'row',
        borderRadius: 25,
        borderWidth: 2,
        overflow: 'hidden',
    },
    button: {
        flex: 1, 
        paddingVertical: 10,
        justifyContent: 'center',
        alignItems: 'center',
    },
    activeButton: {
        backgroundColor: '#A8F94F', 
    },
    inactiveButton: {
        backgroundColor: '#0a0f1b', 
    },
    buttonText: {
        fontSize: 16,
        fontFamily: 'RedHat-Bold',
    },
    activeText: {
        color: '#000', 
        textTransform: 'uppercase',
        fontFamily: 'RedHat-Bold',
    },
    inactiveText: {
        color: '#FFF', 
        textTransform: 'uppercase',
        fontFamily: 'RedHat-Bold',
    },
    //#endregion EntryMethods

    //#region SignUpBox 
    signUpContainer: {
        display: 'flex',
        backgroundColor: '#1A2433',
        paddingVertical: 30,
        paddingHorizontal: 25,
        alignItems: 'center',
        borderRadius: 10,
        gap: 20,
        width: '95%',
    },
    headerTwo: {
        fontSize: 18,
        marginBottom: 10,
        textAlign: 'center',
        fontWeight: '700',
        color: '#FFF',
        textTransform: 'uppercase',
    },
    inputFields: {
        width: '90%',
        borderBottomWidth: 1,
        marginBottom: 20,
        padding: 8,
        borderColor: '#FFF',
        color: '#FFF',
        fontFamily: 'Montserrat-Bold',
    },
    passwordInputCont: {
        flexDirection: 'row',
        alignItems: 'center',
        borderBottomWidth: 1,
        borderColor: '#FFF',
        marginBottom: 20,
        width: '90%',
    },
    passwordInput: {
        flex: 1,
        color: '#FFF',
        padding: 8,
        fontFamily: 'Montserrat-Bold',
    },
    birthBtn: {
        width: '90%',
        borderBottomWidth: 1,
        marginBottom: 20,
        padding: 8,
        borderColor: '#FFF',
    },
    birthBtnTxt: {
        color: '#FFF',
        fontFamily: 'Montserrat-Bold',
    },
    birthDateTxt: {
        color: '#FFF',
        fontFamily: 'Montserrat-Bold',
    },
    signUpBtn: {
        backgroundColor: '#A8F94F', 
        padding: 8,
        borderRadius: 5,
        marginBottom: 5,
    },
    signUpBtnTxt: {
        color: '#000',
        fontSize: 16,
        fontFamily: 'RedHat-Bold',
        textTransform: 'uppercase',
    },
    //#endregion SignUpBox 

    // Bottom Quote
    bottomQuote: {
        display: 'flex',
        alignItems: 'center',
        marginTop: 60,
        marginBottom: 30,
    },
    mainTxtBottom: {
        color: '#FFF',
        fontSize: 13,
        textAlign: 'center',
        width: '75%',
        fontFamily: 'Montserrat-Reg',
    },
    subTxtBottom: {
        color: '#FFF',
        fontSize: 11,
        textAlign: 'center',
        width: '80%',
        fontFamily: 'Montserrat-Thin',
    },
})

export default SignUp;





import React, { useEffect } from 'react';
import { View, Image, StyleSheet } from 'react-native';
import { useAppContext } from '../AppContext';


const SplashScreen = ({ navigation }) => {
    const { userId } = useAppContext();

    useEffect(() => {
        const timer = setTimeout(() => {
            if (userId) {
                navigation.replace('mainTabs');
            } else {
                navigation.replace('ClassPicker');
            }
        }, 6000)

        return () => clearTimeout(timer)
    }, [userId, navigation])

    return (
        <View style={styles.container}>
            <Image source={require('../assets/icon4-1.png')} style={styles.logo} />
        </View>
    )
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: '#0a0f1b',
    },
    logo: {
        width: 150, 
        height: 150,
        resizeMode: 'contain',
    },
})

export default SplashScreen;

import React, {useEffect, useState} from 'react';
import { View, TouchableOpacity, TouchableHighlight, Text, Image, StyleSheet, ScrollView, ActivityIndicator } from 'react-native';
import { useTheme } from '../ThemeContext';
import { useFonts } from 'expo-font';
import { safeAreaView } from 'react-native-safe-area-context';
import Ionicons from  'react-native-vector-icons/Ionicons';
import AsyncStorage from '@react-native-async-storage/async-storage';

const ThemePicker = ({ navigation }) => {
    const { isDarkMode, toggleTheme, currentTheme } = useTheme();
    const [selectedTheme, setSelectedTheme] = useState(isDarkMode ? 'dark' : 'light');

    useEffect(() => {
        setSelectedTheme(isDarkMode ? 'dark' : 'light');
    }, [isDarkMode]);

    const handleThemeChange = async (theme) => {
        setSelectedTheme(theme);

        await AsyncStorage.setItem('theme', theme);
        if ((theme === 'dark' && !isDarkMode) || (theme === 'light' && isDarkMode)) {
            toggleTheme();
        }
    };

    const [fontsLoaded] = useFonts({
        'Poppins-ExtraB': require('../assets/fonts/Poppins/Poppins-ExtraBold.ttf'),
        'Montserrat-ExtraB': require('../assets/fonts/Montserrat/static/Montserrat-ExtraBold.ttf'),
        'Montserrat-Bold': require('../assets/fonts/Montserrat/static/Montserrat-Bold.ttf'),
        'Montserrat-Med': require('../assets/fonts/Montserrat/static/Montserrat-Medium.ttf'),
        'Montserrat-Reg': require('../assets/fonts/Montserrat/static/Montserrat-Regular.ttf'),
        'RedHat-Bold': require('../assets/fonts/Red_Hat_Display/static/RedHatDisplay-Bold.ttf'),
    });

    if (!fontsLoaded) {
        return (
            <View style={styles.loadingContainer}>
                <ActivityIndicator size="large" color="#A8F94F" />
            </View>
        );
    }


    return (
        <ScrollView contentContainerStyle={[styles.mainCont, {backgroundColor: currentTheme.backgroundColor}]}>
            <View style={[styles.themePickers, {backgroundColor: currentTheme.backgroundColor}]}>
                <View style={[styles.labelCont, {backgroundColor: currentTheme.backgroundColor}]}>
                    <TouchableOpacity style={styles.backBtn} onPress={() => navigation.navigate('mainTabs')}>
                        <Ionicons name='arrow-back' color="white" size={25} style={[styles.manageSVG, {color: currentTheme.textColor}]} />
                    </TouchableOpacity>
                </View>

                <Text style={[styles.themeLabel, {color: currentTheme.textColor}]}>Theme</Text>

                <View style={[styles.modePicker, {backgroundColor: currentTheme.backgroundColor2}]}>
                    <TouchableOpacity
                        style={styles.radioBtn}
                        onPress={() => handleThemeChange('dark')}
                    >
                        <Ionicons
                            name={selectedTheme === 'dark' ? 'radio-button-on' : 'radio-button-off'}
                            size={24}
                            color={currentTheme.textColor}
                        />
                        <Text style={[styles.radioLabel, {color: currentTheme.textColor}]}>Dark Mode</Text>
                    </TouchableOpacity>
                    <TouchableOpacity
                        style={styles.radioBtn}
                        onPress={() => handleThemeChange('light')}
                    >
                        <Ionicons
                            name={selectedTheme === 'light' ? 'radio-button-on' : 'radio-button-off'}
                            size={24}
                            color={currentTheme.textColor}
                        />
                        <Text style={[styles.radioLabel, {color: currentTheme.textColor}]}>Light Mode</Text>
                    </TouchableOpacity>
                </View>

            </View>
        </ScrollView>
    )
}

const styles = StyleSheet.create({
    loadingContainer: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: '#0a0f1b',
    },

    mainCont: {
        flexGrow: 1,
        backgroundColor: '#0a0f1b',
        padding: 20,
        paddingTop: 40,
    },

    //#region Label Container
    labelCont: {
        display: 'flex',
        flexDirection: 'row',
        alignItems: 'center',
        gap: 10
    },
    manageSVG: {
        padding: 7.5,
        width: 40,
        height: 40,
        textAlign: 'center'
    },
    themePickLabel: {
        color: '#FFF',
        fontSize: 21,
        fontFamily: 'Montserrat-Bold',
    },
    themeLabel: {
        color: '#FFF',
        fontSize: 28,
        fontFamily: 'Montserrat-ExtraB',
        textTransform: 'uppercase',
        textAlign: 'center',
        marginTop: 20,
        marginBottom: 25,
    },
    //#endregion Label Container

    //#region Color Mode Selections
    modePicker: {
        backgroundColor: '#1A2433',
        marginVertical: 20,
        borderRadius: 15,
    },
    radioBtn: {
        flexDirection: 'row',
        alignItems: 'center',
        gap: 10,
        paddingHorizontal: 35,
        paddingVertical: 20,
        marginLeft: 10,
    },
    radioLabel: {
        color: '#FFF',
        fontSize: 18,
        fontFamily: 'Montserrat-Med',
        textAlign: 'center',
    },
    //#endregion Color Mode Selections
})

export default ThemePicker;

import React, {useEffect, useState} from 'react';
import { View, TouchableOpacity, TouchableHighlight, Text, Image, StyleSheet, ScrollView, ActivityIndicator } from 'react-native';
import { useAppContext } from '../AppContext';
import { useTheme } from '../ThemeContext';
import { useFonts } from 'expo-font';
import { safeAreaView } from 'react-native-safe-area-context';
import FontAwesome from 'react-native-vector-icons/FontAwesome';
import FontAwesome5 from 'react-native-vector-icons/FontAwesome5';
import FontAwesome6 from 'react-native-vector-icons/FontAwesome6';
import AntDesign from 'react-native-vector-icons/AntDesign';
import IconDark from '../assets/icon4-1.png';
import IconLight from '../assets/icon4-2.png';



const UserProfile = ({ navigation }) => {
    // App Contexts
    const { userId, fetchUserData } = useAppContext();
    const [firstName, setFirstName] = useState('');
    const [lastName, setLastName] = useState('');
    const [joinDate, setJoinDate] = useState('');
    const [userAge, setUserAge] = useState('');
    const [profilePic, setProfPic] = useState('');
    const { isDarkMode, toggleTheme, currentTheme } = useTheme();
    const [selectedTheme, setSelectedTheme] = useState(isDarkMode ? 'dark' : 'light');

    useEffect(() => {
        setSelectedTheme(isDarkMode ? 'dark' : 'light');
    }, [isDarkMode]);

    const handleThemeChange = async (theme) => {
        setSelectedTheme(theme);

        await AsyncStorage.setItem('theme', theme);
        if ((theme === 'dark' && !isDarkMode) || (theme === 'light' && isDarkMode)) {
            toggleTheme();
        }
    };

    useEffect(() => {
        console.log('userId in UserProfile:', userId);
        const getUserData = async () => {
            const userData = await fetchUserData(userId);
            setFirstName(userData.first_name);
            setLastName(userData.last_name);
            setJoinDate(userData.created_at)
            setUserAge(userData.age)
            setProfPic(userData.profile_picture)
        };

        getUserData();
    }, [userId]);


    const [fontsLoaded] = useFonts({
        'Poppins-ExtraB': require('../assets/fonts/Poppins/Poppins-ExtraBold.ttf'),
        'Montserrat-ExtraB': require('../assets/fonts/Montserrat/static/Montserrat-ExtraBold.ttf'),
        'Montserrat-Bold': require('../assets/fonts/Montserrat/static/Montserrat-Bold.ttf'),
        'Montserrat-Med': require('../assets/fonts/Montserrat/static/Montserrat-Medium.ttf'),
        'Montserrat-Reg': require('../assets/fonts/Montserrat/static/Montserrat-Regular.ttf'),
        'RedHat-Bold': require('../assets/fonts/Red_Hat_Display/static/RedHatDisplay-Bold.ttf'),
    });

    if (!fontsLoaded) {
        return (
            <View style={styles.loadingContainer}>
                <ActivityIndicator size="large" color="#A8F94F" />
            </View>
        );
    }



    return (
        <ScrollView contentContainerStyle={[styles.mainCont, {backgroundColor: currentTheme.backgroundColor}]}>
            <View style={[styles.headerCont, {backgroundColor: currentTheme.backgroundColor}]}>
                <View style={[styles.logoContainer, {backgroundColor: currentTheme.backgroundColor}]}>
                    <Image source={isDarkMode ? IconDark : IconLight} style={styles.logoImg}/>
                    <Text style={[styles.logoTxt, {color: currentTheme.textColor}]}>G! Tara Na!</Text>
                </View>
            </View>

            <View style={[styles.userProfileCont, {backgroundColor: currentTheme.backgroundColor2}]}>
                <View style={styles.userProfLeft}>
                    <Image source={profilePic ? {uri: profilePic} : require('../assets/placeholderImg.png')} style={styles.userProfPic}/>
                    <View style={styles.nameContainer}>
                        <Text style={[styles.userFirstName, {color: currentTheme.textColor}]}>
                            {firstName}
                        </Text>
                        <Text style={[styles.userLastName, {color: currentTheme.textColor}]}>
                            {lastName}
                        </Text>
                    </View>
                </View>

                <View style={styles.userProfRight}>
                    <TouchableOpacity style={styles.userAgeCont}>
                        <Text style={[styles.userAgeLab, {color: currentTheme.textColor}]}>Age</Text>
                        <Text style={[styles.userAge, {color: currentTheme.textColor}]}>{userAge}</Text>
                    </TouchableOpacity>
                    <TouchableOpacity style={styles.userJoinCont}>
                        <Text style={[styles.userJoinLab, {color: currentTheme.textColor}]}>Joined</Text>
                        <Text style={[styles.userJoin, {color: currentTheme.textColor}]}>{joinDate}</Text>
                    </TouchableOpacity>
                </View>

            </View>

            <View style={styles.profileMenu}>
                <Text style={[styles.profileMenuLab, {color: currentTheme.textColor}]}>Profile</Text>

                <TouchableOpacity style={styles.manageUserLeft} onPress={() => navigation.navigate('ManageUser')}>
                    <FontAwesome6 name='user' size={21} style={[styles.manageSVG, {backgroundColor: currentTheme.backgroundColor3}]} />
                    <Text style={[styles.manageUserTxt, {color: currentTheme.textColor}]}>Manage User</Text>
                </TouchableOpacity>


                <TouchableOpacity style={styles.manageUserLeft} onPress={() => navigation.navigate('UserProgress')}>
                    <AntDesign name='areachart' size={21} style={[styles.manageSVG, {backgroundColor: currentTheme.backgroundColor3}]} />
                    <Text style={[styles.manageUserTxt, {color: currentTheme.textColor}]}>User Progress</Text>
                </TouchableOpacity>

            </View>
        </ScrollView>
    )
}


const styles = StyleSheet.create ({
    loadingContainer: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: '#0a0f1b',
    },

    mainCont: {
        flexGrow: 1,
        backgroundColor: '#0a0f1b',
        padding: 20,
        paddingTop: 40,
    },

    //#region Header
    headerCont: {
        display: 'flex',
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        gap: 30,
        marginBottom: 30,
    },
    logoContainer: {
        display: 'flex',
        flexDirection: 'row',
        justifyContent: 'space-around',
        alignItems: 'center',
        gap: 5,
    },
    logoImg: {
        width: 58,
        height: 58,
        margin: 0,
    },
    logoTxt: {
        color: '#FFF',
        fontSize: 21,
        fontFamily: 'Poppins-ExtraB',
    },
    //#endregion Header

    //#region User Profile Section: 
    userProfileCont: {
        display: 'flex',
        flexDirection: 'row',
        justifyContent: 'space-between',
        paddingHorizontal: 15,
        backgroundColor: '#1A2433',
        paddingVertical: 20,
        borderRadius: 10,
    },  

    // User Left
    userProfLeft: {
        display: 'flex',
        alignItems: 'flex-start',
        gap: 15,
        paddingHorizontal: 20,
    },  
    userProfPic: {
        borderWidth: 1,
        borderColor: '#fff',
        borderRadius: 60,
        width: 120,
        height: 120,
    },
    nameContainer: {
        display: 'flex',
        flexDirection: 'column',
        gap: 5,
    },
    userFirstName: {
        color: '#fff',
        fontSize: 24,
        textTransform: 'uppercase',
        fontFamily: 'Montserrat-Bold',
    },
    userLastName: {
        color: '#fff',
        opacity: 0.8,
        fontSize: 24,
        textTransform: 'uppercase',
        fontFamily: 'Montserrat-Reg',
    },

    // User Right
    userProfRight: {
        display: 'flex',
        justifyContent: 'center',
        gap: 40,
        paddingHorizontal: 20,
    },
    userAgeCont: {
        gap: 5,
    },
    userAgeLab: {
        color: '#fff',
        fontSize: 20,
        fontFamily: 'Montserrat-Bold',
    },
    userAge: {
        color: '#fff',
        fontSize: 17,
        fontFamily: 'Montserrat-Med',
        opacity: 0.8,
    },
    userJoinCont: {
        gap: 5,
    },
    userJoinLab: {
        color: '#fff',
        fontSize: 20,
        fontFamily: 'Montserrat-Bold',
    },
    userJoin: {
        color: '#fff',
        fontSize: 17,
        fontFamily: 'Montserrat-Med',
        opacity: 0.8,
    },
    //#endregion  User Profile Section

    //#region Profile Menu
    profileMenu: {
        marginVertical: 25,
        gap: 20,
        padding: 20,
        display: 'flex',
        alignItems: 'flex-start',
        justifyContent: 'space-evenly',
    },
    profileMenuLab: {
        color: '#fff',
        fontSize: 25,
        fontFamily: 'Montserrat-ExtraB',
    },
    manageUserLeft: {
        display: 'flex',
        flexDirection: 'row',
        gap: 30,
        alignItems: 'center',
        marginHorizontal: 15,
    },
    manageSVG: {
        padding: 7.5,
        width: 40,
        height: 40,
        backgroundColor: '#fff',
        borderRadius: 60,
        textAlign: 'center'
    },
    manageUserTxt: {
        color: '#fff',
        fontSize: 18,
        fontFamily: 'RedHat-Bold',
    },
        //#endregion Profile Menu
})

export default UserProfile;


import React, {useEffect, useState} from 'react';
import { View, TouchableOpacity, TouchableHighlight, Text, TextInput, Image, StyleSheet, ScrollView, Alert, Animated, ActivityIndicator } from 'react-native';
import { AnimatedCircularProgress } from 'react-native-circular-progress';
import { useAppContext } from '../AppContext';
import { useTheme } from '../ThemeContext';
import { FlatList } from 'react-native-gesture-handler';
import { useFonts } from 'expo-font';
import { safeAreaView } from 'react-native-safe-area-context';
import Ionicons from 'react-native-vector-icons/Ionicons';
import FontAwesome from 'react-native-vector-icons/FontAwesome';
import moment from 'moment';

const UserProgress = ({ navigation }) => {
    const [selectedDate, setSelectedDate] = useState(moment());
    const [weekDays, setWeekDays] = useState([]);
    const { userId, fetchUserData } = useAppContext();
    const [userName, setUserName] = useState('');
    const { isDarkMode, toggleTheme, currentTheme } = useTheme();
    const [selectedTheme, setSelectedTheme] = useState(isDarkMode ? 'dark' : 'light');

    useEffect(() => {
        setSelectedTheme(isDarkMode ? 'dark' : 'light');
    }, [isDarkMode]);

    const handleThemeChange = async (theme) => {
        setSelectedTheme(theme);

        await AsyncStorage.setItem('theme', theme);
        if ((theme === 'dark' && !isDarkMode) || (theme === 'light' && isDarkMode)) {
            toggleTheme();
        }
    };

    useEffect(() => {
        const startOfWeek = moment().startOf('week');
        const days = Array.from({ length: 7 }).map((_, i) => 
            moment(startOfWeek).add(i, 'days')
        );
        setWeekDays(days);
    }, []);

    useEffect(() => {
        console.log('userId in UserProfile:', userId);
        const getUserData = async () => {
            const userData = await fetchUserData(userId);
            setUserName(userData.first_name);
        };

        getUserData();
    }, [userId])

    const renderDayItem = ({ item }) => {
        const isSelected = item.isSame(selectedDate, 'day');
        return (
            <TouchableOpacity onPress={() => setSelectedDate(item)} style={styles.dayContainer}>
                <Text style={[styles.dayLabel, isSelected && styles.selectedDayLabel]}>{item.format('ddd')}</Text>
                <Text style={[styles.dateLabel, isSelected && styles.selectedDateLabel]}>{item.format('D')}</Text>
            </TouchableOpacity>
        );
    };

    const [fontsLoaded] = useFonts({
        'Poppins-ExtraB': require('../assets/fonts/Poppins/Poppins-ExtraBold.ttf'),
        'Montserrat-ExtraB': require('../assets/fonts/Montserrat/static/Montserrat-ExtraBold.ttf'),
        'Montserrat-Bold': require('../assets/fonts/Montserrat/static/Montserrat-Bold.ttf'),
        'Montserrat-Med': require('../assets/fonts/Montserrat/static/Montserrat-Medium.ttf'),
        'Montserrat-Reg': require('../assets/fonts/Montserrat/static/Montserrat-Regular.ttf'),
        'RedHat-Bold': require('../assets/fonts/Red_Hat_Display/static/RedHatDisplay-Bold.ttf'),
    });

    if (!fontsLoaded) {
        return (
            <View style={styles.loadingContainer}>
                <ActivityIndicator size="large" color="#A8F94F" />
            </View>
        );
    }


    return (
        <ScrollView contentContainerStyle={[styles.mainCont, {backgroundColor: currentTheme.backgroundColor}]}>
            <TouchableOpacity style={styles.backBtn} onPress={() => navigation.navigate('User')}>
                <Ionicons name='arrow-back' color="white" size={25} style={[styles.manageSVG, {color: currentTheme.textColor}]} />
            </TouchableOpacity>
            
            <Text style={[styles.progressLabel, {color: currentTheme.textColor}]}>User Progress</Text>
            <Text style={[styles.greetingCont, {color: currentTheme.textColor}]}>Good Day! {userName}!</Text>

            <View style={[styles.calendarCont, {backgroundColor: currentTheme.backgroundColor5}]}>
                <View style={styles.monthSelector}>
                    <Text style={styles.monthText}>{selectedDate.format('MMMM')} {selectedDate.format('YYYY')}</Text>
                </View>

                {/* Days of the Week */}
                <FlatList
                    horizontal
                    data={weekDays}
                    renderItem={renderDayItem}
                    keyExtractor={(item) => item.format('D')}
                    contentContainerStyle={styles.weekList}
                    showsHorizontalScrollIndicator={false}
                />
            </View>
            
            <View style={styles.progressCharts}>
                <View style={[styles.progressMajor, {backgroundColor: currentTheme.backgroundColor2}]}>
                    <Text style={[styles.progressMajorLabel, {color: currentTheme.textColor}]}>Major Chords</Text>
                    <AnimatedCircularProgress
                        size={120}
                        width={15}
                        fill={75}
                        tintColor={currentTheme.buttonColor}
                        backgroundColor={currentTheme.borderColor}
                    >
                        {
                            (fill) => (
                                <Text
                                    style={[styles.progressMajorTxt, {color: currentTheme.textColor}]}
                                >
                                    {`${Math.round(fill)}%`}
                                </Text>
                            )
                        }
                    </AnimatedCircularProgress>
                </View>

                <View style={[styles.progressMinor, {backgroundColor: currentTheme.backgroundColor2}]}>
                    <Text style={[styles.progressMinorLabel, {color: currentTheme.textColor}]}>Minor Chords</Text>
                    <AnimatedCircularProgress
                        size={120}
                        width={15}
                        fill={75}
                        tintColor={currentTheme.buttonColor}
                        backgroundColor={currentTheme.borderColor}
                    >
                        {
                            (fill) => (
                                <Text
                                    style={[styles.progressMinorTxt, {color: currentTheme.textColor}]}
                                >
                                    {`${Math.round(fill)}%`}
                                </Text>
                            )
                        }
                    </AnimatedCircularProgress>
                </View>
            </View>


        </ScrollView>
    )
}

const styles = StyleSheet.create({
    loadingContainer: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: '#0a0f1b',
    },

    mainCont: {
        flexGrow: 1,
        backgroundColor: '#0a0f1b',
        padding: 20,
        paddingTop: 40,
    },
    manageSVG: {
        padding: 7.5,
        width: 40,
        height: 40,
        textAlign: 'center'
    },
    progressLabel: {
        color: '#FFF',
        fontSize: 28,
        fontFamily: 'Montserrat-ExtraB',
        textTransform: 'uppercase',
        textAlign: 'center',
        marginTop: 20,
        marginBottom: 25,
    },
    greetingCont: {
        color: '#FFF',
        fontSize: 20,
        fontFamily: 'Montserrat-Bold',
        textAlign: 'center',
        marginTop: 20,
        marginBottom: 25,
    },

    //#region Calendar Header
    calendarCont: {
        backgroundColor: '#A8F94F',
        borderRadius: 20,
        padding: 15,
        marginBottom: 20,
    },
    monthSelector: {
        flexDirection: 'row',
        justifyContent: 'center',
        alignItems: 'center',
        marginBottom: 10,
    },
    monthText: {
        color: '#000',
        fontSize: 20,
        fontFamily: 'Poppins-ExtraB',
        textTransform: 'uppercase',
        textAlign: 'center',
        marginTop: 10,
    },
    weekList: {
        justifyContent: 'space-around',
    },
    dayContainer: {
        alignItems: 'center',
        padding: 10,
    },
    dayLabel: {
        color: '#000',
        fontSize: 15,
        fontFamily: 'Montserrat-Med',
        textAlign: 'center',
    },
    dateLabel: {
        color: '#000',
        fontSize: 15,
        fontFamily: 'Montserrat-Reg',
        textAlign: 'center',
        marginTop: 5,
    },
    selectedDayLabel: {
        color: '#000',
    },
    selectedDateLabel: {
        backgroundColor: '#FFF',
        color: '#000',
        borderRadius: 15,
        paddingHorizontal: 10,
        paddingVertical: 5,
    },
    //#endregion Calendar Header

    progressCharts: {
        display: 'flex',
        gap: 20,
    },

    //#region Minor Chords section
    progressMinorLabel: {
        color: '#FFF',
        fontSize: 20,
        fontFamily: 'Montserrat-Bold',
        textAlign: 'center',
        marginBottom: 12,
    },
    progressMinor: {
        flex: 1,
        alignItems: 'center',
        justifyContent: 'center',
        padding: 25,
        borderRadius: 20,
    },
    progressMinorTxt: {
        color: '#FFF',
        fontSize: 18,
        fontFamily: 'Montserrat-Med',
        textAlign: 'center',
        marginTop: 25,
        marginBottom: 25,
    },
    //#endregion Minor Chords section

    //#region Major Chords section
    progressMajorLabel: {
        color: '#FFF',
        fontSize: 20,
        fontFamily: 'Montserrat-Bold',
        textAlign: 'center',
        marginBottom: 12,
    },
    progressMajor: {
        flex: 1,
        alignItems: 'center',
        justifyContent: 'center',
        padding: 25,
        borderRadius: 20,
    },
    progressMajorTxt: {
        color: '#FFF',
        fontSize: 18,
        fontFamily: 'Montserrat-Med',
        textAlign: 'center',
        marginTop: 25,
        marginBottom: 25,
    },
    //#endregion Major Chords section
})

export default UserProgress;


import React, { createContext, useContext, useState, useEffect } from 'react';
import AsyncStorage from '@react-native-async-storage/async-storage';

const darkTheme = {
    backgroundColor: '#0A0F1B',
    backgroundColor2: '#1A2433',
    backgroundColor3: '#fff',
    backgroundColor4: '#26393E',
    backgroundColor5: '#A8F94F',
    borderColor: '#FFF',
    buttonColor: '#A8F94F',
    textColor: '#fff',
    searchColor: '#000'
}

const lightTheme = {
    backgroundColor: '#f5f5f5',
    backgroundColor2: '#eaeaea',
    backgroundColor3: '#d9d9d9',
    backgroundColor4: '#bcbdbe',
    backgroundColor5: '#1b93ea',
    borderColor: '#000',
    buttonColor: '#1b93ea',
    textColor: '#000',
    searchColor: '#000',
}

const ThemeContext = createContext();


export const ThemeProvider = ({ children }) => {
    const [isDarkMode, setIsDarkMode] = useState(true);

    useEffect(() => {
        const loadTheme = async () => {
            const storedTheme = await AsyncStorage.getItem('theme');
            if (storedTheme === 'light') {
                setIsDarkMode(false);
            } else {
                setIsDarkMode(true);
            }
        }
        loadTheme();
    }, []);

    const toggleTheme = async () => {
        const newTheme = !isDarkMode ? 'dark' : 'light';
        await AsyncStorage.setItem('theme', newTheme);
        setIsDarkMode((prev) => !prev);
    };


    const currentTheme = isDarkMode ? darkTheme : lightTheme;

    return (
        <ThemeContext.Provider value={{ isDarkMode, currentTheme, toggleTheme }}>
            {children}
        </ThemeContext.Provider>
    );
};

export const useTheme = () => useContext(ThemeContext);